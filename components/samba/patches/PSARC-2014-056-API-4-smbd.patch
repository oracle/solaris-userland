Reason for this is only to avoid a sigbus in rare cases. Original purpose
is to leave DEBUG() samba macro options as is because many of its options
can not be copied into the buffer to move it on aligned address location.

This feature can not be misused for "daily" use because of its expesiveness.

--- a/source3/smbd/server.c
+++ b/source3/smbd/server.c
@@ -1764,6 +1764,9 @@ }
 	tevent_req_set_callback(req, smbd_addr_changed, state);
 }
 
+#ifdef __sparcv9	/* works on 64bit SPARC !only! */
+int __sparc_fixalign(int);
+#endif
 /****************************************************************************
  main program.
 ****************************************************************************/
@@ -1920,6 +1923,17 @@ DEBUG(0,("ERROR: Can't log to stdout (-S
 		exit(1);
 	}
 
+#ifdef __sparcv9	/* works on 64bit SPARC !only! */
+	/* if the code will address misaligned memory address then no SIGBUS is triggered but
+	   kernel will emulate the instruction like it was performed against the properly aligned
+	   location. This is here because DEBUG macro options on high debug level sometimes needs
+	   to take argument from "buffer" where the location in buffer might be misaligned.
+	   Because of expensiveness of such oper. this is not intended for common usage
+		Based on API introduced by: PSARC/2014/056
+	 */
+	(void) __sparc_fixalign(1);
+#endif
+
 	/*
 	 * We want to die early if we can't open /dev/urandom
 	 */
