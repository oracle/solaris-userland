Python modules pyjwt and blinker are not available in Solaris, hence disable
tests which depend on those.

Not for upstream

--- oauthlib-3.2.1/tests/oauth2/rfc6749/clients/test_service_application.py
+++ oauthlib-3.2.1/tests/oauth2/rfc6749/clients/test_service_application.py
@@ -3,7 +3,8 @@ import os
 from time import time
 from unittest.mock import patch
 
-import jwt
+import pytest
+pytestmark = pytest.mark.skip("We do not have jwt on Solaris")
 
 from oauthlib.common import Request
 from oauthlib.oauth2 import ServiceApplicationClient
--- oauthlib-3.2.1/tests/oauth1/rfc5849/test_client.py
+++ oauthlib-3.2.1/tests/oauth1/rfc5849/test_client.py
@@ -7,6 +7,7 @@ from oauthlib.oauth1 import (
 from oauthlib.oauth1.rfc5849 import Client
 
 from tests.unittest import TestCase
+import pytest
 
 
 class ClientRealmTests(TestCase):
@@ -104,6 +105,7 @@ class SignatureMethodTest(TestCase):
                    'oauth_signature="JzgJWBxX664OiMW3WE4MEjtYwOjI%2FpaUWHqtdHe68Es%3D"')
         self.assertEqual(h['Authorization'], correct)
 
+    @pytest.mark.skip("Needs pyjwt, which is not available in Solaris")
     def test_rsa_method(self):
         private_key = (
             "-----BEGIN RSA PRIVATE KEY-----\nMIICXgIBAAKBgQDk1/bxy"
@@ -154,6 +156,7 @@ class SignatureMethodTest(TestCase):
         client = Client('client_key', signature_method='invalid')
         self.assertRaises(ValueError, client.sign, 'http://example.com')
 
+    @pytest.mark.skip("Needs pyjwt, which is not available in Solaris")
     def test_rsa_no_key(self):
         client = Client('client_key', signature_method=SIGNATURE_RSA)
         self.assertRaises(ValueError, client.sign, 'http://example.com')
--- oauthlib-3.2.1/tests/oauth1/rfc5849/endpoints/test_base.py
+++ oauthlib-3.2.1/tests/oauth1/rfc5849/endpoints/test_base.py
@@ -11,6 +11,7 @@ from oauthlib.oauth1.rfc5849.endpoints i
 )
 
 from tests.unittest import TestCase
+import pytest
 
 URLENCODED = {"Content-Type": "application/x-www-form-urlencoded"}
 
@@ -390,6 +391,7 @@ class SignatureVerificationTest(TestCase
         r = self.e._create_request(self.uri, 'GET', sig, URLENCODED)
         self.assertTrue(self.e._check_signature(r))
 
+    @pytest.mark.skip("Needs pyjwt, which is not available in Solaris")
     def test_rsa_signature(self):
         rsa_sig = ("fxFvCx33oKlR9wDquJ%2FPsndFzJphyBa3RFPPIKi3flqK%2BJ7yIrMVbH"
                    "YTM%2FLHPc7NChWz4F4%2FzRA%2BDN1k08xgYGSBoWJUOW6VvOQ6fbYhMA"
--- oauthlib-3.2.1/tests/oauth2/rfc6749/test_parameters.py
+++ oauthlib-3.2.1/tests/oauth2/rfc6749/test_parameters.py
@@ -5,6 +5,7 @@ from oauthlib.oauth2.rfc6749.errors impo
 from oauthlib.oauth2.rfc6749.parameters import *
 
 from tests.unittest import TestCase
+import pytest
 
 
 @patch('time.time', new=lambda: 1000)
@@ -240,6 +241,7 @@ class ParameterTests(TestCase):
     def test_custom_json_error(self):
         self.assertRaises(CustomOAuth2Error, parse_token_response, self.json_custom_error)
 
+    @pytest.mark.skip("Needs blinker signaling library, which is not available in Solaris")
     def test_json_token_response(self):
         """Verify correct parameter parsing and validation for token responses. """
         self.assertEqual(parse_token_response(self.json_response), self.json_dict)
@@ -279,6 +281,7 @@ class ParameterTests(TestCase):
         finally:
             del os.environ['OAUTHLIB_STRICT_TOKEN_TYPE']
 
+    @pytest.mark.skip("Needs blinker signaling library, which is not available in Solaris")
     def test_url_encoded_token_response(self):
         """Verify fallback parameter parsing and validation for token responses. """
         self.assertEqual(parse_token_response(self.url_encoded_response), self.json_dict)
--- oauthlib-3.2.1/tests/oauth2/rfc6749/test_server.py
+++ oauthlib-3.2.1/tests/oauth2/rfc6749/test_server.py
@@ -16,7 +16,7 @@ from oauthlib.oauth2.rfc6749.grant_types
 )
 
 from tests.unittest import TestCase
-
+import pytest
 
 class AuthorizationEndpointTest(TestCase):
 
@@ -278,6 +278,7 @@ twIDAQAB
             refresh_token_generator=tokens.random_token_generator
         )
 
+    @pytest.mark.skip("Needs pyjwt, which is not available in Solaris")
     @mock.patch('oauthlib.common.generate_token', new=lambda: 'abc')
     def test_authorization_grant(self):
         body = 'client_id=me&redirect_uri=http%3A%2F%2Fback.to%2Fme&grant_type=authorization_code&code=abc&scope=all+of+them'
@@ -318,6 +319,7 @@ twIDAQAB
         }
         self.assertEqual(body, token)
 
+    @pytest.mark.skip("Needs pyjwt, which is not available in Solaris")
     @mock.patch('oauthlib.common.generate_token', new=lambda: 'abc')
     def test_password_grant(self):
         body = 'grant_type=password&username=a&password=hello&scope=all+of+them'
@@ -333,6 +335,7 @@ twIDAQAB
         }
         self.assertEqual(body, token)
 
+    @pytest.mark.skip("Needs pyjwt, which is not available in Solaris")
     @mock.patch('oauthlib.common.generate_token', new=lambda: 'abc')
     def test_scopes_and_user_id_stored_in_access_token(self):
         body = 'grant_type=password&username=a&password=hello&scope=all+of+them'
@@ -346,6 +349,7 @@ twIDAQAB
         self.assertEqual(claims['scope'], 'all of them')
         self.assertEqual(claims['user_id'], 123)
 
+    @pytest.mark.skip("Needs pyjwt, which is not available in Solaris")
     @mock.patch('oauthlib.common.generate_token', new=lambda: 'abc')
     def test_client_grant(self):
         body = 'grant_type=client_credentials&scope=all+of+them'
--- oauthlib-3.2.1/tests/oauth2/rfc6749/clients/test_backend_application.py
+++ oauthlib-3.2.1/tests/oauth2/rfc6749/clients/test_backend_application.py
@@ -6,6 +6,7 @@ from oauthlib import signals
 from oauthlib.oauth2 import BackendApplicationClient
 
 from tests.unittest import TestCase
+import pytest
 
 
 @patch('time.time', new=lambda: 1000)
@@ -53,6 +54,7 @@ class BackendApplicationClientTest(TestC
         body = client.prepare_request_body(body=self.body, **self.kwargs)
         self.assertFormBodyEqual(body, self.body_kwargs)
 
+    @pytest.mark.skip("Needs blinker signaling library, which is not available in Solaris")
     def test_parse_token_response(self):
         client = BackendApplicationClient(self.client_id)
 
--- oauthlib-3.2.1/tests/oauth2/rfc6749/clients/test_legacy_application.py
+++ oauthlib-3.2.1/tests/oauth2/rfc6749/clients/test_legacy_application.py
@@ -7,6 +7,7 @@ from oauthlib import signals
 from oauthlib.oauth2 import LegacyApplicationClient
 
 from tests.unittest import TestCase
+import pytest
 
 
 @patch('time.time', new=lambda: 1000)
@@ -56,6 +57,7 @@ class LegacyApplicationClientTest(TestCa
                 body=self.body, **self.kwargs)
         self.assertFormBodyEqual(body, self.body_kwargs)
 
+    @pytest.mark.skip("Needs blinker signaling library, which is not available in Solaris")
     def test_parse_token_response(self):
         client = LegacyApplicationClient(self.client_id)
 
--- oauthlib-3.2.1/tests/oauth2/rfc6749/clients/test_mobile_application.py
+++ oauthlib-3.2.1/tests/oauth2/rfc6749/clients/test_mobile_application.py
@@ -6,6 +6,7 @@ from oauthlib import signals
 from oauthlib.oauth2 import MobileApplicationClient
 
 from tests.unittest import TestCase
+import pytest
 
 
 @patch('time.time', new=lambda: 1000)
@@ -78,6 +79,7 @@ class MobileApplicationClientTest(TestCa
         # credentials at this point.
         self.assertIsNone(client.code)
 
+    @pytest.mark.skip("Needs blinker signaling library, which is not available in Solaris")
     def test_parse_token_response(self):
         client = MobileApplicationClient(self.client_id)
 
--- oauthlib-3.2.1/tests/oauth2/rfc6749/clients/test_web_application.py
+++ oauthlib-3.2.1/tests/oauth2/rfc6749/clients/test_web_application.py
@@ -13,6 +13,7 @@ from oauthlib.oauth2.rfc6749 import erro
 from oauthlib.oauth2.rfc6749.clients import AUTH_HEADER, BODY, URI_QUERY
 
 from tests.unittest import TestCase
+import pytest
 
 
 @patch('time.time', new=lambda: 1000)
@@ -154,6 +155,7 @@ class WebApplicationClientTest(TestCase)
         self.assertIsNone(client.refresh_token)
         self.assertIsNone(client.mac_key)
 
+    @pytest.mark.skip("Needs blinker signaling library, which is not available in Solaris")
     def test_parse_token_response(self):
         client = WebApplicationClient(self.client_id)
 
