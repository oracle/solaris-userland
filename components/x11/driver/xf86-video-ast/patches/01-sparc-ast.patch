Oracle Bug 15556759 - SUNBT6831193 AST driver does not work on sparc

To make AST driver work on sparc, here's the changes:

. replace inb/outb with ioctls
. send vis ioctl to get pci config info for the device
. new code to do vgahw related operations
. new code to map/unmap  video memory

With later updates from these Oracle bug fixes:

15560547 SUNBT6837131 Can't bring up dtlogin with AST2000 driver on nvx_114
15663014 SUNBT6977519 Mass minor update to X upstream releases [August 2010 edition]
15675158 SUNBT6992282 Mismerge of ast ddx driver
15738038 SUNBT7083537 Xorg 1.12 & associated module updates
14850206 update to Xorg 1.13.0
19240845 X server crashes in ast_drv.so on S11U2
21256857 Update Xorg to the latest community version 1.17.2
21767820 Cannot set anymore display resolution to 1280x1024
23287368 Update Xorg server to 1.18.3

Not suitable for upstream in current form, but portions may be able to made
upstreamable.


--- xf86-video-ast-1.2.0/src/Makefile.am
+++ xf86-video-ast-1.2.0/src/Makefile.am
@@ -40,6 +40,7 @@ ast_driver.c 	\
 	ast_mode.c 	\
 	ast_mode.h 	\
 	ast_pcirename.h \
+	ast_sparc_driver.c \
 	ast_tool.c 	\
 	ast_vgatool.c 	\
 	ast_vgatool.h   \
--- xf86-video-ast-1.2.0/src/ast.h
+++ xf86-video-ast-1.2.0/src/ast.h
@@ -33,6 +33,11 @@ #define Support_ShadowFB
 
 #include <string.h>
 #include <stdlib.h>
+#include <sys/visual_io.h>
+
+#ifdef __sparc
+#define __sparc__ 1
+#endif
 
 #include "ast_pcirename.h"
 
@@ -293,10 +298,28 @@ ShadowWindowProc window;
     CreateScreenResourcesProcPtr CreateScreenResources;
 #endif
 
+#if defined(__sparc__)
+    char               *deviceName;
+    int                fd;
+#endif
+
 } ASTRec, *ASTRecPtr, *ASTPtr;
 
 #define ASTPTR(p) ((ASTRecPtr)((p)->driverPrivate))
 
+#if defined(__sparc__)
+
+extern struct pci_device *ASTGetPciInfo(ASTRecPtr);
+extern ScrnInfoPtr        ASTAllocScreen(DriverPtr, GDevPtr);
+extern pointer           ASTMapVidMem(ScrnInfoPtr, unsigned int, CARD32,
+                                               unsigned long, unsigned long);
+extern void              ASTUnmapVidMem(ScrnInfoPtr, pointer, unsigned long);
+extern void              ASTNotifyModeChanged(ScrnInfoPtr);
+extern void              ASTSaveHW(ScrnInfoPtr);
+extern void              ASTRestoreHW(ScrnInfoPtr);
+
+#endif
+
 /* ast_vgatool.c */
 extern Bool bASTIsVGAEnabled(ScrnInfoPtr pScrn);
 extern Bool ASTGetVGA2EDID(ScrnInfoPtr pScrn, unsigned char *pEDIDBuffer);
--- xf86-video-ast-1.2.0/src/ast_cursor.c
+++ xf86-video-ast-1.2.0/src/ast_cursor.c
@@ -82,7 +82,11 @@ pAST->HWCInfoPtr = infoPtr;
 
     infoPtr->Flags = HARDWARE_CURSOR_TRUECOLOR_AT_8BPP |
                      HARDWARE_CURSOR_INVERT_MASK |
+#if     !defined(__sparc__)
                      HARDWARE_CURSOR_BIT_ORDER_MSBFIRST;
+#else
+                    0;
+#endif
 
     infoPtr->MaxWidth  = MAX_HWC_WIDTH;
     infoPtr->MaxHeight = MAX_HWC_HEIGHT;
--- xf86-video-ast-1.2.0/src/ast_driver.c
+++ xf86-video-ast-1.2.0/src/ast_driver.c
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2005 ASPEED Technology Inc.
+ * Copyright (c) 2009, 2018, Oracle and/or its affiliates.
  *
  * Permission to use, copy, modify, distribute, and sell this software and its
  * documentation for any purpose is hereby granted without fee, provided that
@@ -64,7 +65,7 @@ static void ASTFreeScreen(ScrnInfoPtr pS
 static ModeStatus ASTValidMode(ScrnInfoPtr pScrn, DisplayModePtr mode, Bool verbose, int flags);
 
 /* Internally used functions */
-static Bool ASTGetRec(ScrnInfoPtr pScrn);
+extern Bool ASTGetRec(ScrnInfoPtr pScrn);
 static void ASTFreeRec(ScrnInfoPtr pScrn);
 static Bool ASTSaveScreen(ScreenPtr pScreen, Bool unblack);
 static Bool ASTCloseScreen(ScreenPtr pScreen);
@@ -230,7 +231,7 @@ xf86MatchDevice(AST_DRIVER_NAME, &devSec
       return FALSE;
     }
 
-#ifndef XSERVER_LIBPCIACCESS
+#if !defined(XSERVER_LIBPCIACCESS) && !defined(__sparc__)
    /*
     * This probing is just checking the PCI data the server already
     * collected.
@@ -240,6 +241,8 @@ return FALSE;
     }
 #endif
 
+#if !defined(__sparc__)
+
     numUsed = xf86MatchPciInstances(AST_NAME, PCI_VENDOR_AST,
 				   ASTChipsets, ASTPciChipsets,
 				   devSections, numDevSections,
@@ -305,6 +308,36 @@ } /* end of if flags */
 
     free(devSections);
     free(usedChips);
+#else
+    if (flags & PROBE_DETECT) {
+        foundScreen = TRUE;
+    } else {
+        for (i = 0; i < numDevSections; i++) {
+
+           ScrnInfoPtr pScrn = NULL;
+
+           /* Allocate new ScrnInfoRec and claim the slot */
+           if ((pScrn = ASTAllocScreen(drv, devSections[i])) != NULL) {
+               pScrn->driverVersion = AST_VERSION;
+               pScrn->driverName = AST_DRIVER_NAME;
+               pScrn->name = AST_NAME;
+
+               pScrn->Probe = ASTProbe;
+               pScrn->PreInit = ASTPreInit;
+               pScrn->ScreenInit = ASTScreenInit;
+               pScrn->SwitchMode = ASTSwitchMode;
+               pScrn->AdjustFrame = ASTAdjustFrame;
+               pScrn->EnterVT = ASTEnterVT;
+               pScrn->LeaveVT = ASTLeaveVT;
+               pScrn->FreeScreen = ASTFreeScreen;
+               pScrn->ValidMode = ASTValidMode;
+
+               foundScreen = TRUE;
+           }
+       }
+    }
+    free(devSections);
+#endif
 
     return foundScreen;
 }
@@ -376,6 +409,10 @@ return FALSE;
 
    pEnt = xf86GetEntityInfo(pScrn->entityList[0]);
 
+#if defined(__sparc__)
+   pEnt->location.type = BUS_PCI;
+#endif
+
    if (flags & PROBE_DETECT) {
        ASTProbeDDC(pScrn, pEnt->index);
        return TRUE;
@@ -478,7 +515,11 @@ }
    /* Fill AST Info */
    pAST = ASTPTR(pScrn);
    pAST->pEnt    = xf86GetEntityInfo(pScrn->entityList[0]);
+#if !defined(__sparc__)
    pAST->PciInfo = xf86GetPciInfoForEntity(pAST->pEnt->index);
+#else
+   pAST->PciInfo = ASTGetPciInfo(pAST);
+#endif
 #ifndef XSERVER_LIBPCIACCESS
    pAST->PciTag  = pciTag(pAST->PciInfo->bus, pAST->PciInfo->device,
 			  pAST->PciInfo->func);
@@ -591,8 +632,10 @@ pScrn->videoRam = pAST->ulVRAMSize / 102
    }
    else
    {
+#if !(defined(__sparc__))
        /* Enable VGA MMIO Access */
        vASTEnableVGAMMIO(pScrn);
+#endif
 
        /* Get Chip Type */
        if (PCI_DEV_REVISION(pAST->PciInfo) >= 0x40)
@@ -812,6 +855,10 @@ #endif
 
    vFillASTModeInfo (pScrn);
 
+#if (defined(__sparc__))
+   ASTNotifyModeChanged(pScrn);
+#endif
+
    ASTSave(pScrn);
    if (!ASTModeInit(pScrn, pScrn->currentMode)) {
       xf86DrvMsg(pScrn->scrnIndex, X_ERROR, "Mode Init Failed \n");
@@ -1169,7 +1216,7 @@ * Private data for the driver is stored
  * These two functions create and destroy that private data.
  *
  */
-static Bool
+Bool
 ASTGetRec(ScrnInfoPtr pScrn)
 {
    if (pScrn->driverPrivate)
--- xf86-video-ast-1.2.0/src/ast_tool.c
+++ xf86-video-ast-1.2.0/src/ast_tool.c
@@ -55,11 +55,16 @@ ASTMapMem(ScrnInfoPtr pScrn)
 {
    ASTRecPtr pAST = ASTPTR(pScrn);
 
-#ifndef XSERVER_LIBPCIACCESS
+#if !defined(XSERVER_LIBPCIACCESS) || defined(__sparc__)
+#if !defined(__sparc__)
    pAST->FBVirtualAddr = xf86MapPciMem(pScrn->scrnIndex, VIDMEM_FRAMEBUFFER,
 				 pAST->PciTag,
 				 pAST->FBPhysAddr, pAST->FbMapSize);
 #else
+   pAST->FBVirtualAddr = ASTMapVidMem(pScrn, 0x01, 0,
+                                pAST->FBPhysAddr, pAST->FbMapSize);
+#endif /* sparc */
+#else
    {
      void** result = (void**)&pAST->FBVirtualAddr;
      int err = pci_device_map_range(pAST->PciInfo,
@@ -85,10 +90,14 @@ ASTUnmapMem(ScrnInfoPtr pScrn)
 {
    ASTRecPtr pAST = ASTPTR(pScrn);
 
-#ifndef XSERVER_LIBPCIACCESS
+#if !defined(XSERVER_LIBPCIACCESS) || defined(__sparc__)
+#if !defined(__sparc__)
    xf86UnMapVidMem(pScrn->scrnIndex, (pointer) pAST->FBVirtualAddr,
 		   pAST->FbMapSize);
 #else
+   ASTUnmapVidMem(pScrn, (pointer)pAST->FBVirtualAddr, pAST->FbMapSize);
+#endif
+#else
    pci_device_unmap_range(pAST->PciInfo, pAST->FBVirtualAddr, pAST->FbMapSize);
 #endif
 
@@ -101,7 +110,8 @@ Bool
 ASTMapMMIO(ScrnInfoPtr pScrn)
 {
    ASTRecPtr pAST = ASTPTR(pScrn);
-#ifndef XSERVER_LIBPCIACCESS
+#if !defined(XSERVER_LIBPCIACCESS) || defined(__sparc__)
+#if !defined(__sparc__)
    int mmioFlags;
 
 #if !defined(__alpha__)
@@ -116,6 +126,11 @@ pAST->PciTag,
 				         pAST->MMIOPhysAddr, pAST->MMIOMapSize);
 
 #else
+   pAST->MMIOVirtualAddr = ASTMapVidMem(pScrn,
+                        0x02 | 0x08, 0,
+                        pAST->MMIOPhysAddr, pAST->MMIOMapSize);
+#endif /* sparc */
+#else
    {
      void** result = (void**)&pAST->MMIOVirtualAddr;
      int err = pci_device_map_range(pAST->PciInfo,
@@ -140,10 +155,14 @@ ASTUnmapMMIO(ScrnInfoPtr pScrn)
 {
    ASTRecPtr pAST = ASTPTR(pScrn);
 
-#ifndef XSERVER_LIBPCIACCESS
+#if !defined(XSERVER_LIBPCIACCESS) || defined(__sparc__)
+#if !defined(__sparc__)
    xf86UnMapVidMem(pScrn->scrnIndex, (pointer) pAST->MMIOVirtualAddr,
 		   pAST->MMIOMapSize);
 #else
+   ASTUnmapVidMem(pScrn, (pointer)pAST->MMIOVirtualAddr, pAST->MMIOMapSize);
+#endif
+#else
    pci_device_unmap_range(pAST->PciInfo, pAST->MMIOVirtualAddr, pAST->MMIOMapSize);
 #endif
    pAST->MMIOVirtualAddr = 0;
--- xf86-video-ast-1.2.0/src/ast_vgatool.c
+++ xf86-video-ast-1.2.0/src/ast_vgatool.c
@@ -559,6 +559,7 @@ ulVRAMSize = VIDEOMEM_SIZE_64M;
        break;
    }
 
+#if !defined(__sparc__)
    /* Adjust VRAMSize from Scratch */
    GetIndexRegMask(CRTC_PORT, 0x99, 0xFF, jReg);
    switch (jReg & 0x03)
@@ -573,6 +574,7 @@ case 0x03:
        ulVRAMSize -= 0x400000;
        break;
    }
+#endif
 
    return (ulVRAMSize);
 }
@@ -880,6 +882,7 @@ } /* end of vASTLoadPalette */
 void
 ASTDisplayPowerManagementSet(ScrnInfoPtr pScrn, int PowerManagementMode, int flags)
 {
+#if !defined(__sparc__)
    ASTRecPtr pAST;
    UCHAR SEQ01, CRB6;
    ULONG ulData, ulTemp;
@@ -939,6 +942,7 @@ if (PowerManagementMode == DPMSModeOn)
    {  /* 3rd Tx */
       if (pAST->jTxChipType == Tx_DP501) SetDP501VideoOutput(pScrn, 1);
    }
+#endif
 }
 
 
@@ -1423,7 +1427,7 @@ { 0x0028, 0x00000003 },
     { 0x0030, 0x00000040 },
     { 0x0028, 0x00000003 },
     { 0x000C, 0x00005a21 },
-    { 0x0034, 0x00007c03 },
+    { 0x0034, 0x00007c43 },
     { 0x0120, 0x00004c41 },
     { 0xffff, 0xffffffff },
 };
@@ -1476,7 +1480,7 @@ { 0x0028, 0x00000003 },
     { 0x0030, 0x00000040 },
     { 0x0028, 0x00000003 },
     { 0x000C, 0x00005a21 },
-    { 0x0034, 0x00007c03 },
+    { 0x0034, 0x00007c43 },
     { 0x0120, 0x00005061 },
     { 0xffff, 0xffffffff },
 };
@@ -3556,9 +3560,11 @@ pAST = ASTPTR(pScrn);
 
    {
        /* Enable PCI */
+#if !defined(__sparc__)
        PCI_READ_LONG(pAST->PciInfo, &ulData, 0x04);
        ulData |= 0x03;
        PCI_WRITE_LONG(pAST->PciInfo, ulData, 0x04);
+#endif
 
        /* Enable VGA */
        vEnableVGA(pScrn);
@@ -3855,9 +3861,11 @@ uint32_t ulData;
     pAST = ASTPTR(pScrn);
 
     /* Enable PCI */
+#if    !defined(__sparc__)
     PCI_READ_LONG(pAST->PciInfo, &ulData, 0x04);
     ulData |= 0x03;
     PCI_WRITE_LONG(pAST->PciInfo, ulData, 0x04);
+#endif
 
     /* init DRAM if no F/W */
     /* TODO */
@@ -3949,9 +3957,11 @@ jReg = inb(pAST->RelocateIO + 0x43);
     if (jReg != 0x01)
     {
        /* Enable PCI */
+#if !defined(__sparc__)
        PCI_READ_LONG(pAST->PciInfo, &ulData, 0x04);
        ulData |= 0x03;
        PCI_WRITE_LONG(pAST->PciInfo, ulData, 0x04);
+#endif
 
        outb(pAST->RelocateIO + 0x43, 0x01);
        outb(pAST->RelocateIO + 0x42, 0x01);
--- xf86-video-ast-1.2.0/src/ast_vgatool.h
+++ xf86-video-ast-1.2.0/src/ast_vgatool.h
@@ -1,5 +1,6 @@
 /*
  * Copyright (c) 2005 ASPEED Technology Inc.
+ * Copyright (c) 2005, 2016, Oracle and/or its affiliates.
  *
  * Permission to use, copy, modify, distribute, and sell this software and its
  * documentation for any purpose is hereby granted without fee, provided that
@@ -23,6 +24,9 @@ */
 #ifndef AST_VGATOOL_H
 #define AST_VGATOOL_H
 
+#include <unistd.h>
+#include <stropts.h>
+
 /* VRAM Size Definition */
 #define VIDEOMEM_SIZE_08M	0x00800000
 #define VIDEOMEM_SIZE_16M	0x01000000
@@ -43,6 +47,88 @@ #define DRAMTYPE_1Gx32		3
 #define DRAMTYPE_2Gx16		6
 #define DRAMTYPE_4Gx16		7
 
+#if defined(__sparc__)
+
+#define AR_PORT_WRITE          0x40
+#define MISC_PORT_WRITE        0x42
+#define VGA_ENABLE_PORT        0x43
+#define SEQ_PORT               0x44
+#define DAC_INDEX_READ         0x47
+#define DAC_INDEX_WRITE        0x48
+#define DAC_DATA               0x49
+#define GR_PORT                0x4E
+#define CRTC_PORT              0x54
+#define INPUT_STATUS1_READ     0x5A
+#define MISC_PORT_READ         0x4C
+
+static inline uchar_t
+_GetRegFromFd(uchar_t off, int fd)
+{
+       struct vis_io_reg   io_reg = {
+              .offset = off
+       };
+       ioctl(fd, VIS_GETIOREG, &io_reg);
+       return io_reg.value;
+}
+
+#define GetReg(off)            _GetRegFromFd(off, pAST->fd)
+
+#define SetReg(off, val)       do {                                    \
+                       struct vis_io_reg   io_reg = {                  \
+                              .offset = off,                           \
+                              .value = val                             \
+                       };                                              \
+                       ioctl(pAST->fd, VIS_SETIOREG, &io_reg);         \
+                       } while (0)
+
+#define GetIndexReg(off, index, val)   do {                            \
+                       struct vis_io_reg   io_reg = {                  \
+                              .offset = off,                           \
+                              .value = index,                          \
+                              .offset1 = off+1                         \
+                       };                                              \
+                       ioctl(pAST->fd, VIS_GETINDEX, &io_reg);         \
+                       val = io_reg.value;                             \
+                       } while (0)
+
+#define SetIndexReg(off, index, val) do {                              \
+                       struct vis_io_reg   io_reg = {                  \
+                              .offset = off,                           \
+                              .value = index,                          \
+                              .offset1 = off+1,                        \
+                              .value1 = val                            \
+                       };                                              \
+                       ioctl(pAST->fd, VIS_SETINDEX, &io_reg);         \
+                       } while (0)
+
+#define GetIndexRegMask(off, index, and, val) do {                     \
+                       struct vis_io_reg   io_reg = {                  \
+                              .offset = off,                           \
+                              .value = index,                          \
+                              .offset1 = off+1                         \
+                       };                                              \
+                       ioctl(pAST->fd, VIS_GETINDEX, &io_reg);         \
+                       val = io_reg.value & and;                       \
+                       } while (0)
+
+#define SetIndexRegMask(off, index, and, val) do {                     \
+                       UCHAR __Temp;                                   \
+                       struct vis_io_reg   io_reg = {                  \
+                              .offset = off,                           \
+                              .value = index,                          \
+                              .offset1 = off+1                         \
+                       };                                              \
+                       ioctl(pAST->fd, VIS_GETINDEX, &io_reg);         \
+                       __Temp = (io_reg.value & and) | val;            \
+                       io_reg.offset = off;                            \
+                       io_reg.value = index;                           \
+                       io_reg.offset1 = off+1;                         \
+                       io_reg.value1 = __Temp;                         \
+                       ioctl(pAST->fd, VIS_SETINDEX, &io_reg);         \
+                       } while (0)
+
+#else /* !__sparc__ */
+
 #define AR_PORT_WRITE		(pAST->MMIOVirtualAddr + 0x3c0)
 #define MISC_PORT_WRITE		(pAST->MMIOVirtualAddr + 0x3c2)
 #define VGA_ENABLE_PORT		(pAST->MMIOVirtualAddr + 0x3c3)
@@ -75,6 +161,7 @@ MMIO_OUT8(base, 0, index);	\
 						__Temp = (MMIO_IN8(base, 1)&(and))|(val);	\
 						SetIndexReg(base,index,__Temp);			\
 						}
+#endif
 
 #define VGA_GET_PALETTE_INDEX(index, red, green, blue) \
 { \
