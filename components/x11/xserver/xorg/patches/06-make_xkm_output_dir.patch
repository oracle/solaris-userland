Based on Xorg upstream git commit b07602014061cb41540f6a7e74e4132e67aa1117
From: Alan Coopersmith <Alan.Coopersmith@sun.com>
Date: Mon, 22 Aug 2005 21:47:59 +0000

If MAKE_XKM_OUTPUT_DIR is defined, call trans_mkdir to create directory if
it doesn't already exist. (ported from Solaris Xsun bug #5039004)

[Xorg has since dropped upstream, but we still use.]

Updated to include changes to ensure xkb directory & files are writable
by gid 0, to fix bug:
6916317 Changing xkb settings after login not working on snv130

--- xorg-server-21.1.18/os/xstrans.c
+++ xorg-server-21.1.18/os/xstrans.c
@@ -15,3 +15,12 @@ #define TRANS_REOPEN
 #define TRANS_SERVER
 #define XSERV_t
 #include <X11/Xtrans/transport.c>
+
+#ifdef SUNSOFT
+/* Allow xkb/ddxLoad.c to call the static function defined in transport.c */
+_X_HIDDEN int
+Xorg_mkdir(const char *path, int mode)
+{
+    return trans_mkdir(path, mode);
+}
+#endif
--- xorg-server-21.1.18/xkb/Makefile.am
+++ xorg-server-21.1.18/xkb/Makefile.am
@@ -1,6 +1,7 @@
 noinst_LTLIBRARIES = libxkb.la libxkbstubs.la
 
 AM_CFLAGS = $(DIX_CFLAGS)
+AM_CFLAGS += -DMAKE_XKM_OUTPUT_DIR
 
 DDX_SRCS = \
         ddxBeep.c \
--- xorg-server-21.1.18/xkb/ddxLoad.c
+++ xorg-server-21.1.18/xkb/ddxLoad.c
@@ -56,6 +56,16 @@ #else
 #define PATHSEPARATOR "/"
 #endif
 
+#ifdef MAKE_XKM_OUTPUT_DIR
+#include <errno.h>
+/* Wrapper around trans_mkdir() from Xtransutil.c
+   to more safely make directories */
+_X_HIDDEN int Xorg_mkdir(const char *path, int mode);
+# ifndef XKM_OUTPUT_DIR_MODE
+#  define XKM_OUTPUT_DIR_MODE 0775
+# endif
+#endif
+
 static unsigned
 LoadXKM(unsigned want, unsigned need, const char *keymap, XkbDescPtr *xkbRtrn);
 
@@ -67,8 +77,14 @@ const char *pathsep = "";
     int r = -1;
 
 #ifndef WIN32
+#ifdef MAKE_XKM_OUTPUT_DIR
+    if ((geteuid() == 0) &&
+        (Xorg_mkdir(XKM_OUTPUT_DIR, XKM_OUTPUT_DIR_MODE) == 0) &&
+        (strlen(XKM_OUTPUT_DIR) < size)) {
+#else
     /* Can we write an xkm and then open it too? */
     if (access(XKM_OUTPUT_DIR, W_OK | X_OK) == 0) {
+#endif
         directory = XKM_OUTPUT_DIR;
         if (XKM_OUTPUT_DIR[strlen(XKM_OUTPUT_DIR) - 1] != '/')
             pathsep = "/";
@@ -115,6 +129,15 @@ #else
     const char *xkmfile = "-";
 #endif
 
+    /* save gid and reset to gid 0 before making xkm_output_dir or
+       running xkbcomp to create the xkm file in it. */
+    gid_t usr_gid = getgid();
+
+    if (setregid(0, usr_gid) < 0)
+        ErrorF("Error in setting regid to 0: %s\n", strerror(errno));
+    if (setegid(0) < 0)
+        ErrorF("Error in setting egid to 0: %s\n", strerror(errno));
+
     snprintf(keymap, sizeof(keymap), "server-%s", display);
 
     OutputDirectory(xkm_output_dir, sizeof(xkm_output_dir));
@@ -166,6 +189,11 @@ #else
     out = fopen(tmpname, "w");
 #endif
 
+    if (setregid(usr_gid, 0) < 0)
+        ErrorF("Error in resetting regid: %s\n", strerror(errno));
+    if (setegid(usr_gid) < 0)
+        ErrorF("Error in resetting egid: %s\n", strerror(errno));
+
     if (out != NULL) {
         /* Now write to xkbcomp */
         (*callback)(out, userdata);
