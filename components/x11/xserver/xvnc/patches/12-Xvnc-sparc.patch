From 9da4f05748c1ec084ee28982c3d1299a5f775664 Mon Sep 17 00:00:00 2001
From: Pierre Ossman <ossman@cendio.se>
Date: Sat, 7 Dec 2024 15:38:14 +0100       
Subject: [PATCH 158/211] Fix encoder solid area detection

This got completely broken in baca73d0 where the templated method got
incorrectly called instead of the wrapper/multiplexer. It seems to have
been harmless on most systems, but caused crashes on CPUs with strict
memory alignment requirements.
---
--- a/common/rfb/EncodeManager.h	2025-09-18 15:19:52.625675258 -0700
+++ b/common/rfb/EncodeManager.h	2025-09-18 15:23:51.537308296 -0700
@@ -100,8 +100,9 @@
   protected:
     // Templated, optimised methods
     template<class T>
-    inline bool checkSolidTile(const Rect& r, const T,
-                               const PixelBuffer *pb);
+    inline bool checkSolidTile(int width, int height,
+                               const T* buffer, int stride,
+			       const T colourValue);
     template<class T>
     inline bool analyseRect(int width, int height,
                             const T* buffer, int stride,
--- a/common/rfb/EncodeManager.cxx	2025-09-18 15:19:46.538862098 -0700
+++ b/common/rfb/EncodeManager.cxx	2025-09-18 15:22:51.373145285 -0700
@@ -883,14 +883,26 @@
 
 bool EncodeManager::checkSolidTile(const Rect& r, const uint8_t* colourValue,
                                    const PixelBuffer *pb)
-{
+{
+  const uint8_t* buffer;
+  int stride;
+  
+  buffer = pb->getBuffer(r, &stride);
+
   switch (pb->getPF().bpp) {
   case 32:
-    return checkSolidTile(r, *(const uint32_t*)colourValue, pb);
+        return checkSolidTile(r.width(), r.height(),
+                          (const uint32_t*)buffer, stride,
+                          *(const uint32_t*)colourValue);
   case 16:
-    return checkSolidTile(r, *(const uint16_t*)colourValue, pb);
+        return checkSolidTile(r.width(), r.height(),
+                          (const uint16_t*)buffer, stride,
+                          *(const uint16_t*)colourValue);
   default:
-    return checkSolidTile(r, *(const uint8_t*)colourValue, pb);
+        return checkSolidTile(r.width(), r.height(),
+                          (const uint8_t*)buffer, stride,
+                          *(const uint8_t*)colourValue);
+
   }
 }
 
@@ -1061,23 +1073,16 @@
 }
 
 template<class T>
-inline bool EncodeManager::checkSolidTile(const Rect& r,
-                                          const T colourValue,
-                                          const PixelBuffer *pb)
+inline bool EncodeManager::checkSolidTile(int width, int height,
+                                          const T* buffer, int stride,
+                                          const T colourValue)
 {
-  int w, h;
-  const T* buffer;
-  int stride, pad;
+  int pad;
+  pad = stride - width;
 
-  w = r.width();
-  h = r.height();
-
-  buffer = (const T*)pb->getBuffer(r, &stride);
-  pad = stride - w;
-
-  while (h--) {
-    int w_ = w;
-    while (w_--) {
+  while (height--) {
+    int width_ = width;
+    while (width_--) {
       if (*buffer != colourValue)
         return false;
       buffer++;
