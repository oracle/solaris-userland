- Change for GNOME 3 where gnome-terminal expects a UTF-8 locale (25022410)
- upstream made changes to make vncserver start as a systemd service
  This patch includes changes to maintain the CLI as we have been shipping 
  it in 11.4 and earlier

not suitable for upstream

--- a/unix/vncserver/vncserver.in	2023-03-29 08:24:54.563199466 -0700
+++ b/unix/vncserver/vncserver.in	2023-03-29 09:32:56.941691747 -0700
@@ -28,6 +27,21 @@
 #
 
 # First make sure we're operating in a sane environment.
+$exedir = "";
+$slashndx = rindex($0, "/");
+if($slashndx>=0) {
+    $exedir = substr($0, 0, $slashndx+1);
+}
+
+# With Gnome 3, gnome-terminal-server won't exec unless vncserver is started with UTF-8 locale.
+for ($ENV{LANG}) {
+    /\.UTF-8/     and do {last;};
+    /^C$|^POSIX$/ and do {$ENV{LANG} = "C.UTF-8"; last;};
+    /\..*\@/      and do {$ENV{LANG} =~ s/\..*\@/.UTF-8\@/g; last;};
+    /\./          and do {$ENV{LANG} =~ s/\..*/.UTF-8/g; last;};
+    /_/           and do {$ENV{LANG} = "$ENV{LANG}.UTF-8"; last;};
+    $ENV{LANG} = "C.UTF-8";
+}
 &SanityCheck();
 
 #
@@ -50,6 +50,8 @@
 # your site
 #
 
+$geometry = "1024x768";
+
 $vncUserDir = rindex("$ENV{XDG_CONFIG_HOME}", "/", 0) == 0
   ? "$ENV{XDG_CONFIG_HOME}/tigervnc"
   : "$ENV{HOME}/.config/tigervnc";
@@ -61,12 +63,61 @@
 
 $vncUserConfig = "$vncUserDir/config";
 
-$vncSystemConfigDir = "@CMAKE_INSTALL_FULL_SYSCONFDIR@/tigervnc";
+$vncSystemConfigDir = "etc/tigervnc";
 $vncSystemConfigDefaultsFile = "$vncSystemConfigDir/vncserver-config-defaults";
 $vncSystemConfigMandatoryFile = "$vncSystemConfigDir/vncserver-config-mandatory";
 
+$skipxstartup = 0;
 $xauthorityFile = "$ENV{XAUTHORITY}" || "$ENV{HOME}/.Xauthority";
 
+$xstartupFile = $vncUserDir . "/xstartup";
+$defaultXStartup
+    = ("#!/bin/sh\n\n".
+       "unset SESSION_MANAGER\n".
+       "unset DBUS_SESSION_BUS_ADDRESS\n". 
+       "OS=`uname -s`\n".
+       "if [ \$OS = 'Linux' ]; then\n".
+       "  case \"\$WINDOWMANAGER\" in\n".
+       "    \*gnome\*)\n".
+       "      if [ -e /etc/SuSE-release ]; then\n".
+       "        PATH=\$PATH:/opt/gnome/bin\n".
+       "        export PATH\n".
+       "      fi\n".
+       "      ;;\n".
+       "  esac\n".
+       "fi\n".
+       "if [ -x /etc/X11/xinit/xinitrc ]; then\n".
+       "  exec /etc/X11/xinit/xinitrc\n".
+       "fi\n".
+       "if [ -f /etc/X11/xinit/xinitrc ]; then\n".
+       "  exec sh /etc/X11/xinit/xinitrc\n".
+       "fi\n".
+       "if [ -x /etc/gdm/Xsession ] && [ -x /usr/bin/dtstart ] ; then\n".
+       "  exec /etc/gdm/Xsession /usr/bin/dtstart jds\n".
+       "fi\n".
+       "if [ -x /etc/X11/gdm/Xsession ] && [ -x /usr/bin/dtstart ] ; then\n".
+       "  exec /etc/X11/gdm/Xsession /usr/bin/dtstart jds\n".
+       "fi\n".
+       "if [ -x /usr/dt/config/Xsession.jds ]; then\n".
+       "  exec /usr/dt/config/Xsession.jds\n".
+       "fi\n".
+       "[ -r \$HOME/.Xresources ] && xrdb \$HOME/.Xresources\n".
+       "xsetroot -solid grey\n".
+       "xterm -geometry 80x24+10+10 -ls -title \"\$VNCDESKTOP Desktop\" &\n".
+       "twm &\n");
+
+$defaultConfig
+    = ("## Supported server options to pass to vncserver upon invocation can be listed\n".
+       "## in this file. See the following manpages for more: vncserver(1) Xvnc(1).\n".
+       "## Several common ones are shown below. Uncomment and modify to your liking.\n".
+       "##\n".
+       "# securitytypes=vncauth,tlsvnc\n".
+       "# desktop=sandbox\n".
+       "# geometry=2000x1200\n".
+       "# localhost\n".
+       "# alwaysshared\n");
+
+
 chop($host = `uname -n`);
 
 if (-d "/etc/X11/fontpath.d") {
@@ -82,19 +147,71 @@
     $fontPath = $defFontPath;
 }
 
+# Check command line options
+
+&ParseOptions("-geometry",1,"-depth",1,"-pixelformat",1,"-name",1,"-kill",1,
+	      "-help",0,"-h",0,"--help",0,"-fp",1,"-list",0,"-fg",0,"-autokill",0,"-noxstartup",0,"-xstartup",1);
+
+&Usage() if ($opt{'-help'} || $opt{'-h'} || $opt{'--help'});
+
+&Kill() if ($opt{'-kill'});
+
+&List() if ($opt{'-list'});
+
+# Uncomment this line if you want default geometry, depth and pixelformat
+# to match the current X display:
+# &GetXDisplayDefaults();
+
+if ($opt{'-geometry'}) {
+    $geometry = $opt{'-geometry'};
+}
+if ($opt{'-depth'}) {
+    $depth = $opt{'-depth'};
+    $pixelformat = "";
+}
+if ($opt{'-pixelformat'}) {
+    $pixelformat = $opt{'-pixelformat'};
+}
+if ($opt{'-noxstartup'}) {
+    $skipxstartup = 1;
+}
+if ($opt{'-xstartup'}) {
+    $xstartupFile = $opt{'-xstartup'};
+}
+if ($opt{'-fp'}) {
+    $fontPath = $opt{'-fp'};
+    $fpArgSpecified = 1;
+}
+
+&CheckGeometryAndDepth();
+
+# Create the user's vnc directory if necessary.
+if (!(-e $vncUserDir)) {
+    if (!mkdir($vncUserDir,0755)) {
+	die "$prog: Could not create $vncUserDir.\n";
+    }
+}
+
 # Find display number.
-if ((@ARGV == 1) && ($ARGV[0] =~ /^:(\d+)$/)) {
+if ((@ARGV > 0) && ($ARGV[0] =~ /^:(\d+)$/)) {
     $displayNumber = $1;
+    shift(@ARGV);
     if (!&CheckDisplayNumber($displayNumber)) {
 	die "A VNC server is already running as :$displayNumber\n";
     }
-} else {
+} elsif ((@ARGV > 0) && ($ARGV[0] !~ /^-/) && ($ARGV[0] !~ /^\+/)) {
     &Usage();
+} else {
+    $displayNumber = &GetDisplayNumber();
 }
 
 $vncPort = 5900 + $displayNumber;
 
-$desktopName = "$host:$displayNumber ($ENV{USER})";
+if ($opt{'-name'}) {
+    $desktopName = $opt{'-name'};
+} else {
+    $desktopName = "$host:$displayNumber ($ENV{USER})";
+}
 
 my %default_opts;
 my %config;
@@ -101,12 +218,16 @@
 
 # We set some reasonable defaults. Config file settings
 # override these where present.
-$default_opts{desktop} = $desktopName;
-$default_opts{auth} = $xauthorityFile;
+$default_opts{desktop} = &quotedString($desktopName);
+$default_opts{auth} = &quotedString($xauthorityFile);
+$default_opts{geometry} = $geometry if ($geometry);
+$default_opts{depth} = $depth if ($depth);
+$default_opts{pixelformat} = $pixelformat if ($pixelformat);
+
 $default_opts{rfbauth} = "$vncUserDir/passwd";
 $default_opts{rfbport} = $vncPort;
 $default_opts{fp} = $fontPath if ($fontPath);
-$default_opts{pn} = undef;
+$default_opts{pn} = "";
 
 # Load user-overrideable system defaults
 LoadConfig($vncSystemConfigDefaultsFile);
@@ -124,8 +245,8 @@
 LoadConfig($vncSystemConfigMandatoryFile, 1);
 
 #
-# Check whether VNC authentication is enabled, and if so, check that
-# a VNC password has been created.
+# Check whether VNC authentication is enabled, and if so, prompt the user to
+# create a VNC password if they don't already have one.
 #
 
 $securityTypeArgSpecified = 0;
@@ -142,67 +263,47 @@
     }
   }
 }
-if ($config{'password'} ||
-    $config{'passwordfile'} ||
-    $config{'rfbauth'}) {
-    $passwordArgSpecified = 1;
+
+# ...and finally we check CLI args, which in the case of the topic at
+# hand (VNC auth or not), override anything found in configuration files
+# (even so-called "mandatory" settings).
+for ($i = 0; $i < @ARGV; ++$i) {
+    # -SecurityTypes can be followed by a space or "="
+    my @splitargs = split('=', $ARGV[$i]);
+    if (@splitargs <= 1 && $i < @ARGV - 1) {
+        push(@splitargs, $ARGV[$i + 1]);
+    }
+    if (lc(@splitargs[0]) eq "-securitytypes") {
+        if (@splitargs > 1) {
+            $securityTypeArgSpecified = 1;
+        }
+        foreach $arg2 (split(',', @splitargs[1])) {
+            if (grep {$_ eq lc($arg2)} @vncAuthStrings) {
+                $vncAuthEnabled = 1;
+            }
+        }
+    }
+    if ((lc(@splitargs[0]) eq "-password")
+     || (lc(@splitargs[0]) eq "-passwordfile"
+     || (lc(@splitargs[0]) eq "-rfbauth"))) {
+        $passwordArgSpecified = 1;
+    }
 }
 
 if ((!$securityTypeArgSpecified || $vncAuthEnabled) && !$passwordArgSpecified) {
     ($z,$z,$mode) = stat("$vncUserDir/passwd");
-    if (! -e "$vncUserDir/passwd") {
-        die "VNC authentication enabled, but no password file created.\n";
-    } elsif ($mode & 077) {
-        die "$vncUserDir/passwd must NOT be accessible by others. Set permission to 0600.\n";
+    if (!(-e "$vncUserDir/passwd") || ($mode & 077)) {
+        warn "\nYou will require a password to access your desktops.\n\n";
+        system($exedir."vncpasswd -q $vncUserDir/passwd");
+        if (($? >> 8) != 0) {
+            exit 1;
+        }
     }
 }
 
-#
-# Find a desktop session to run
-#
+$desktopLog = "$vncUserDir/$host:$displayNumber.log";
+unlink($desktopLog);
 
-my $sessionname;
-my %session;
-
-$sessionname = delete $config{'session'};
-
-if ($sessionname) {
-  %session = LoadXSession($sessionname);
-  if (!%session) {
-    warn "Could not load configured desktop session $sessionname\n";
-    $sessionname = undef;
-  }
-}
-
-if (!$sessionname) {
-  foreach $file (glob("/usr/share/xsessions/*.desktop")) {
-    ($name) = $file =~ /^.*\/(.*)[.]desktop$/;
-    %session = LoadXSession($name);
-    if (%session) {
-      $sessionname = $name;
-      last;
-    }
-  }
-}
-
-if (!$sessionname) {
-  die "Could not find a desktop session to run\n";
-}
-
-warn "Using desktop session $sessionname\n";
-
-if (!$session{'Exec'}) {
-  die "No command specified for desktop session\n";
-}
-
-$ENV{GDMSESSION} = $sessionname;
-$ENV{DESKTOP_SESSION} = $sessionname;
-$ENV{XDG_SESSION_DESKTOP} = $sessionname;
-
-if ($session{'DesktopNames'}) {
-    $ENV{XDG_CURRENT_DESKTOP} = $session{'DesktopNames'} =~ s/;/:/gr;
-}
-
 # Make an X server cookie and set up the Xauthority file
 # mcookie is a part of util-linux, usually only GNU/Linux systems have it.
 $cookie = `mcookie`;
@@ -292,7 +481,7 @@
           # current config file being loaded defined the logical opposite setting
           # (NeverShared vs. AlwaysShared, etc etc).
           $toggle = lc($1); # must normalize key case
-          $config{$toggle} = undef;
+          $config{$toggle} = $k;
         }
       }
       close(IN);
@@ -300,60 +489,49 @@
   }
 }
 
-
 #
-# Load a session desktop file
+# CheckGeometryAndDepth simply makes sure that the geometry and depth values
+# are sensible.
 #
-sub LoadXSession {
-  local ($name) = @_;
-  my $file, $found_group, %session;
 
-  $file = "/usr/share/xsessions/$name.desktop";
+sub CheckGeometryAndDepth
+{
+    if ($geometry =~ /^(\d+)x(\d+)$/) {
+	$width = $1; $height = $2;
 
-  if (!stat($file)) {
-    warn "Could not find session desktop file $file";
-    return;
-  }
+	if (($width<1) || ($height<1)) {
+	    die "$prog: geometry $geometry is invalid\n";
+	}
 
-  if (!open(IN, $file)) {
-    warn "Could not open session desktop file $file";
-    return;
-  }
-
-  $found_group = 0;
-  while (my $line = <IN>) {
-    next if $line =~ /^#/;
-    next if $line =~ /^\s*$/;
-
-    if (!$found_group) {
-        next if $line != "[Desktop Entry]";
-        $found_group = 1;
-        next;
+	$geometry = "${width}x$height";
     } else {
-        last if $line =~ /^\[/;
+	die "$prog: geometry $geometry is invalid\n";
     }
 
-    my ($key, $value) = $line =~ /^\s*([]A-Za-z0-9_@\-\[]+)\s*=\s*(.*)$/;
-    if (!$key) {
-        warn "Invalid session desktop file $file";
-        close(IN);
-        return;
+    if ($depth && (($depth < 8) || ($depth > 32))) {
+	die "Depth must be between 8 and 32\n";
     }
+}
 
-    $value =~ s/\\s/ /g;
-    $value =~ s/\\n/\n/g;
-    $value =~ s/\\t/\t/g;
-    $value =~ s/\\r/\r/g;
-    $value =~ s/\\\\/\\/g;
 
-    $session{$key} = $value;
-  }
+#
+# GetDisplayNumber gets the lowest available display number.  A display number
+# n is taken if something is listening on the VNC server port (5900+n) or the
+# X server port (6000+n).
+#
 
-  close(IN);
+sub GetDisplayNumber
+{
+    foreach $n (1..99) {
+	if (&CheckDisplayNumber($n)) {
+	    return $n+0; # Bruce Mah's workaround for bug in perl 5.005_02
+	}
+    }
 
-  return %session;
+    die "$prog: no free display number on $host.\n";
 }
 
+
 #
 # CheckDisplayNumber checks if the given display number is available.  A
 # display number n is taken if something is listening on the VNC server port
@@ -362,61 +540,299 @@
 
 sub CheckDisplayNumber
 {
-    my($n) = @_;
+    local ($n) = @_;
 
-    use Socket;
+    socket(S, $AF_INET, $SOCK_STREAM, 0) || die "$prog: socket failed: $!\n";
+    eval 'setsockopt(S, &SOL_SOCKET, &SO_REUSEADDR, pack("l", 1))';
+    if (!bind(S, pack('S n x12', $AF_INET, 6000 + $n))) {
+	close(S);
+	return 0;
+    }
+    close(S);
 
-    my $x11_lock_path = "/tmp/.X$n-lock";
+    socket(S, $AF_INET, $SOCK_STREAM, 0) || die "$prog: socket failed: $!\n";
+    eval 'setsockopt(S, &SOL_SOCKET, &SO_REUSEADDR, pack("l", 1))';
+    if (!bind(S, pack('S n x12', $AF_INET, 5900 + $n))) {
+	close(S);
+	return 0;
+    }
+    close(S);
 
-    if (-e $x11_lock_path) {
-        my($pid) = `cat "$x11_lock_path"` =~ /^\s*(\d+)\s*$/;
-        if (defined($pid) && kill(0, $pid)) {
-            # Lock is associated with valid PID.
-            return 0;
-        }
+    if (-e "/tmp/.X$n-lock") {
+	warn "\nWarning: $host:$n is taken because of /tmp/.X$n-lock\n";
+	warn "Remove this file if there is no X server $host:$n\n";
+	return 0;
     }
 
-    my $rfb_port = 5900 + $n;
-    my $x11_port = 6000 + $n;
+    if (-e "/tmp/.X11-unix/X$n") {
+	warn "\nWarning: $host:$n is taken because of /tmp/.X11-unix/X$n\n";
+	warn "Remove this file if there is no X server $host:$n\n";
+	return 0;
+    }
 
-    for my $port ($rfb_port, $x11_port) {
-        # Bind to port to confirm it is not in use.
-        socket(S, PF_INET, SOCK_STREAM, 0) || die "$prog: socket failed: $!\n";
-        setsockopt(S, SOL_SOCKET, SO_REUSEADDR, 1);
-        if (!bind(S, sockaddr_in($port, INADDR_ANY))) {
-            # Port is in use.
-            close(S);
-            return 0;
-        }
-        close(S);
+    if (-e "/usr/spool/sockets/X11/$n") {
+	warn("\nWarning: $host:$n is taken because of ".
+             "/usr/spool/sockets/X11/$n\n");
+	warn "Remove this file if there is no X server $host:$n\n";
+	return 0;
     }
 
-    my $x11_unix_domain = "/tmp/.X11-unix/X$n";
+    return 1;
+}
 
-    if (-e $x11_unix_domain) {
-        # Connect to UNIX domain socket to confirm it is not in use.
-        socket(S, PF_UNIX, SOCK_STREAM, 0) || die "$prog: socket failed: $!\n";
-        if (connect(S, sockaddr_un($x11_unix_domain))) {
-            # UNIX domain socket is in use.
-            close(S);
-            return 0;
-        }
-        close(S);
+
+#
+# GetXDisplayDefaults uses xdpyinfo to find out the geometry, depth and pixel
+# format of the current X display being used.  If successful, it sets the
+# options as appropriate so that the X VNC server will use the same settings
+# (minus an allowance for window manager decorations on the geometry).  Using
+# the same depth and pixel format means that the VNC server won't have to
+# translate pixels when the desktop is being viewed on this X display (for
+# TrueColor displays anyway).
+#
+
+sub GetXDisplayDefaults
+{
+    local (@lines, @matchlines, $width, $height, $defaultVisualId, $i,
+	   $red, $green, $blue);
+
+    $wmDecorationWidth = 4;	# a guess at typical size for window manager
+    $wmDecorationHeight = 24;	# decoration size
+
+    return if (!defined($ENV{DISPLAY}));
+
+    @lines = `xdpyinfo 2>/dev/null`;
+
+    return if ($? != 0);
+
+    @matchlines = grep(/dimensions/, @lines);
+    if (@matchlines) {
+	($width, $height) = ($matchlines[0] =~ /(\d+)x(\d+) pixels/);
+
+	$width -= $wmDecorationWidth;
+	$height -= $wmDecorationHeight;
+
+	$geometry = "${width}x$height";
     }
 
-    return 1;
+    @matchlines = grep(/default visual id/, @lines);
+    if (@matchlines) {
+	($defaultVisualId) = ($matchlines[0] =~ /id:\s+(\S+)/);
+
+	for ($i = 0; $i < @lines; $i++) {
+	    if ($lines[$i] =~ /^\s*visual id:\s+$defaultVisualId$/) {
+		if (($lines[$i+1] !~ /TrueColor/) ||
+		    ($lines[$i+2] !~ /depth/) ||
+		    ($lines[$i+4] !~ /red, green, blue masks/))
+		{
+		    return;
+		}
+		last;
+	    }
+	}
+
+	return if ($i >= @lines);
+
+	($depth) = ($lines[$i+2] =~ /depth:\s+(\d+)/);
+	($red,$green,$blue)
+	    = ($lines[$i+4]
+	       =~ /masks:\s+0x([0-9a-f]+), 0x([0-9a-f]+), 0x([0-9a-f]+)/);
+
+	$red = hex($red);
+	$green = hex($green);
+	$blue = hex($blue);
+
+	if ($red > $blue) {
+	    $red = int(log($red) / log(2)) - int(log($green) / log(2));
+	    $green = int(log($green) / log(2)) - int(log($blue) / log(2));
+	    $blue = int(log($blue) / log(2)) + 1;
+	    $pixelformat = "rgb$red$green$blue";
+	} else {
+	    $blue = int(log($blue) / log(2)) - int(log($green) / log(2));
+	    $green = int(log($green) / log(2)) - int(log($red) / log(2));
+	    $red = int(log($red) / log(2)) + 1;
+	    $pixelformat = "bgr$blue$green$red";
+	}
+    }
 }
 
+
 #
+# quotedString returns a string which yields the original string when parsed
+# by a shell.
+#
+
+sub quotedString
+{
+    local ($in) = @_;
+
+    $in =~ s/\'/\'\"\'\"\'/g;
+
+    return "'$in'";
+}
+
+
+#
+# removeSlashes turns slashes into underscores for use as a file name.
+#
+
+sub removeSlashes
+{
+    local ($in) = @_;
+
+    $in =~ s|/|_|g;
+
+    return "$in";
+}
+
+
+#
 # Usage
 #
 
 sub Usage
 {
-    die("\nusage: $prog <display>\n\n");
+    die("\nusage: $prog [:<number>] [-name <desktop-name>] [-depth <depth>]\n".
+	"                 [-geometry <width>x<height>]\n".
+	"                 [-pixelformat rgbNNN|bgrNNN]\n".
+	"                 [-fp <font-path>]\n".
+	"                 [-fg]\n".
+	"                 [-autokill]\n".
+	"                 [-noxstartup]\n".
+	"                 [-xstartup <file>]\n".
+	"                 <Xvnc-options>...\n\n".
+	"       $prog -kill <X-display>\n\n".
+	"       $prog -list\n\n");
 }
 
 
+#
+# List
+#
+
+sub List
+{
+    opendir(dir, $vncUserDir);
+    my @filelist = readdir(dir);
+    closedir(dir);
+    print "\nTigerVNC server sessions:\n\n";
+    print "X DISPLAY #\tPROCESS ID\n";
+    foreach my $file (@filelist) {
+	if ($file =~ /$host:(\d+)$\.pid/) {
+	    chop($tmp_pid = `cat $vncUserDir/$file`);
+	    if (kill 0, $tmp_pid) {
+		print ":".$1."\t\t".`cat $vncUserDir/$file`;
+	    } else {
+		unlink ($vncUserDir . "/" . $file);
+	    }
+	}
+    }
+    exit;
+}
+
+
+#
+# Kill
+#
+
+sub Kill
+{
+    $opt{'-kill'} =~ s/(:\d+)\.\d+$/$1/; # e.g. turn :1.0 into :1
+
+    if ($opt{'-kill'} =~ /^:\d+$/) {
+	$pidFile = "$vncUserDir/$host$opt{'-kill'}.pid";
+    } else {
+	if ($opt{'-kill'} !~ /^$host:/) {
+	    die "\nCan't tell if $opt{'-kill'} is on $host\n".
+		"Use -kill :<number> instead\n\n";
+	}
+	$pidFile = "$vncUserDir/$opt{'-kill'}.pid";
+    }
+
+    if (! -r $pidFile) {
+	die "\nCan't find file $pidFile\n".
+	    "You'll have to kill the Xvnc process manually\n\n";
+    }
+
+    $SIG{'HUP'} = 'IGNORE';
+    chop($pid = `cat $pidFile`);
+    warn "Killing Xvnc process ID $pid\n";
+
+    if (kill 0, $pid) {
+	system("kill $pid");
+	sleep(1);
+	if (kill 0, $pid) {
+	    print "Xvnc seems to be deadlocked.  Kill the process manually and then re-run\n";
+	    print "    ".$0." -kill ".$opt{'-kill'}."\n";
+	    print "to clean up the socket files.\n";
+	    exit
+	}
+
+    } else {
+	warn "Xvnc process ID $pid already killed\n";
+	$opt{'-kill'} =~ s/://;
+
+	if (-e "/tmp/.X11-unix/X$opt{'-kill'}") {
+	    print "Xvnc did not appear to shut down cleanly.";
+	    print " Removing /tmp/.X11-unix/X$opt{'-kill'}\n";
+	    unlink "/tmp/.X11-unix/X$opt{'-kill'}";
+	}
+	if (-e "/tmp/.X$opt{'-kill'}-lock") {
+	    print "Xvnc did not appear to shut down cleanly.";
+	    print " Removing /tmp/.X$opt{'-kill'}-lock\n";
+	    unlink "/tmp/.X$opt{'-kill'}-lock";
+	}
+    }
+
+    unlink $pidFile;
+    exit;
+}
+
+
+#
+# ParseOptions takes a list of possible options and a boolean indicating
+# whether the option has a value following, and sets up an associative array
+# %opt of the values of the options given on the command line. It removes all
+# the arguments it uses from @ARGV and returns them in @optArgs.
+#
+
+sub ParseOptions
+{
+    local (@optval) = @_;
+    local ($opt, @opts, %valFollows, @newargs);
+
+    while (@optval) {
+	$opt = shift(@optval);
+	push(@opts,$opt);
+	$valFollows{$opt} = shift(@optval);
+    }
+
+    @optArgs = ();
+    %opt = ();
+
+    arg: while (defined($arg = shift(@ARGV))) {
+	foreach $opt (@opts) {
+	    if ($arg eq $opt) {
+		push(@optArgs, $arg);
+		if ($valFollows{$opt}) {
+		    if (@ARGV == 0) {
+			&Usage();
+		    }
+		    $opt{$opt} = shift(@ARGV);
+		    push(@optArgs, $opt{$opt});
+		} else {
+		    $opt{$opt} = 1;
+		}
+		next arg;
+	    }
+	}
+	push(@newargs,$arg);
+    }
+
+    @ARGV = @newargs;
+}
+
+
 # Routine to make sure we're operating in a sane environment.
 sub SanityCheck
 {
@@ -430,7 +846,7 @@
     #
 
  cmd:
-    foreach $cmd ("uname","xauth","xinit") {
+    foreach $cmd ("uname","xauth") {
 	for (split(/:/,$ENV{PATH})) {
 	    if (-x "$_/$cmd") {
 		next cmd;
@@ -439,17 +855,62 @@
 	die "$prog: couldn't find \"$cmd\" on your PATH.\n";
     }
 
-    foreach $cmd ("/etc/X11/xinit/Xsession", "/etc/X11/Xsession") {
-        if (-x "$cmd") {
-            $Xsession = $cmd;
-            last;
-        }
+    if($exedir eq "") {
+      cmd2:
+	foreach $cmd ("Xvnc","vncpasswd") {
+	    for (split(/:/,$ENV{PATH})) {
+		if (-x "$_/$cmd") {
+		    next cmd2;
+		}
+	    }
+	    die "$prog: couldn't find \"$cmd\" on your PATH.\n";
+	}
     }
-    if (not defined $Xsession) {
-        die "$prog: Couldn't find suitable Xsession.\n";
+    else {
+      cmd3:
+	foreach $cmd ($exedir."Xvnc",$exedir."vncpasswd") {
+	    for (split(/:/,$ENV{PATH})) {
+		if (-x "$cmd") {
+		    next cmd3;
+		}
+	    }
+	    die "$prog: couldn't find \"$cmd\".\n";
+	}
     }
 
     if (!defined($ENV{HOME})) {
 	die "$prog: The HOME environment variable is not set.\n";
     }
+
+    #
+    # Find socket constants. 'use Socket' is a perl5-ism, so we wrap it in an
+    # eval, and if it fails we try 'require "sys/socket.ph"'.  If this fails,
+    # we just guess at the values.  If you find perl moaning here, just
+    # hard-code the values of AF_INET and SOCK_STREAM.  You can find these out
+    # for your platform by looking in /usr/include/sys/socket.h and related
+    # files.
+    #
+
+    chop($os = `uname`);
+    chop($osrev = `uname -r`);
+
+    eval 'use Socket';
+    if ($@) {
+	eval 'require "sys/socket.ph"';
+	if ($@) {
+	    if (($os eq "SunOS") && ($osrev !~ /^4/)) {
+		$AF_INET = 2;
+		$SOCK_STREAM = 2;
+	    } else {
+		$AF_INET = 2;
+		$SOCK_STREAM = 1;
+	    }
+	} else {
+	    $AF_INET = &AF_INET;
+	    $SOCK_STREAM = &SOCK_STREAM;
+	}
+    } else {
+	$AF_INET = &AF_INET;
+	$SOCK_STREAM = &SOCK_STREAM;
+    }
 }
