#
# Make pam_set_data/pam_get_data work with OpenSSH
#
# The way PAM is implemented in OpenSSH makes pam_set_data unusable
# for passing data between PAM stacks.
#
# The problem is, that pam_authenticate and pam_acct_mgmt are called
# in a separate auxiliary process. Any data stored using pam_set_data
# and any  other state information stored by those two functions are
# lost when the auxiliary process exits (with exceptions like
# environment variables, which are sent over between the processes).
#
# This patch fixes this by switching the roles of the monitor and the
# auxiliary process when doing PAM authentication. In the new code the
# monitor will be the one calling pam_authenticate and pam_acct_mgmt
# (eventually blocking and calling callbacks), whereas the other
# process (callback child) will be sending messages to the client
# (either directly or through privsep child).
#
# Patch origin: in-house
#
# Reported upstream:
# https://bugzilla.mindrot.org/show_bug.cgi?id=2548
#
--- old/auth-pam.c	2025-10-10 12:02:52.899811705 +0200
+++ new/auth-pam.c	2025-10-10 12:04:09.485675500 +0200
@@ -112,42 +112,26 @@ extern u_int utmp_len;
 #endif
 
 /*
- * Formerly known as USE_POSIX_THREADS, using this is completely unsupported
- * and generally a bad idea.  Use at own risk and do not expect support if
- * this breaks.
+ * PAM processing model has been rewritten.
+ * Now all the calls to PAM are within the monitor process,
+ * pam_get_data/pam_set_data works as designed and there is no need
+ * for the threads anymore.
  */
 #ifdef UNSUPPORTED_POSIX_THREADS_HACK
-#include <pthread.h>
-/*
- * Avoid namespace clash when *not* using pthreads for systems *with*
- * pthreads, which unconditionally define pthread_t via sys/types.h
- * (e.g. Linux)
- */
-typedef pthread_t sp_pthread_t;
-#else
-typedef pid_t sp_pthread_t;
-#define pthread_exit	fake_pthread_exit
-#define pthread_create	fake_pthread_create
-#define pthread_cancel	fake_pthread_cancel
-#define pthread_join	fake_pthread_join
+# error "UNSUPPORTED_POSIX_THREADS_HACK no longer supported"
 #endif
 
 struct pam_ctxt {
-	sp_pthread_t	 pam_thread;
-	int		 pam_psock;
-	int		 pam_csock;
-	int		 pam_done;
+	pid_t	pam_child;
+	int	pam_psock;
+	int	pam_csock;
+	int	pam_done;
 };
 
 static void sshpam_free_ctx(void *);
 static struct pam_ctxt *cleanup_ctxt;
 
-#ifndef UNSUPPORTED_POSIX_THREADS_HACK
-/*
- * Simulate threads with processes.
- */
-
-static int sshpam_thread_status = -1;
+static int sshpam_child_status = -1;
 static sshsig_t sshpam_oldsig;
 
 static void
@@ -156,85 +140,25 @@ sshpam_sigchld_handler(int sig)
 	ssh_signal(SIGCHLD, SIG_DFL);
 	if (cleanup_ctxt == NULL)
 		return;	/* handler called after PAM cleanup, shouldn't happen */
-	if (waitpid(cleanup_ctxt->pam_thread, &sshpam_thread_status, WNOHANG)
+	if (waitpid(cleanup_ctxt->pam_child, &sshpam_child_status, WNOHANG)
 	    <= 0) {
-		/* PAM thread has not exitted, privsep slave must have */
-		kill(cleanup_ctxt->pam_thread, SIGTERM);
-		while (waitpid(cleanup_ctxt->pam_thread,
-		    &sshpam_thread_status, 0) == -1) {
+		/* callback child has not exited, privsep slave must have */
+		kill(cleanup_ctxt->pam_child, SIGTERM);
+		while (waitpid(cleanup_ctxt->pam_child,
+		    &sshpam_child_status, 0) == -1) {
 			if (errno == EINTR)
 				continue;
 			return;
 		}
 	}
-	if (sshpam_thread_status == -1)
+	if (WIFSIGNALED(sshpam_child_status) &&
+	    WTERMSIG(sshpam_child_status) == SIGTERM)
 		return;
-	if (WIFSIGNALED(sshpam_thread_status)) {
-		if (signal_is_crash(WTERMSIG(sshpam_thread_status)))
-			_exit(EXIT_CHILD_CRASH);
-	} else if (!WIFEXITED(sshpam_thread_status))
-		_exit(EXIT_CHILD_CRASH);
-}
-
-/* ARGSUSED */
-static void
-pthread_exit(void *value)
-{
-	_exit(0);
-}
-
-/* ARGSUSED */
-static int
-pthread_create(sp_pthread_t *thread, const void *attr,
-    void *(*thread_start)(void *), void *arg)
-{
-	pid_t pid;
-	struct pam_ctxt *ctx = arg;
-
-	sshpam_thread_status = -1;
-	switch ((pid = fork())) {
-	case -1:
-		error("fork(): %s", strerror(errno));
-		return errno;
-	case 0:
-		close(ctx->pam_psock);
-		ctx->pam_psock = -1;
-		thread_start(arg);
-		_exit(1);
-	default:
-		*thread = pid;
-		close(ctx->pam_csock);
-		ctx->pam_csock = -1;
-		sshpam_oldsig = ssh_signal(SIGCHLD, sshpam_sigchld_handler);
-		return (0);
-	}
-}
-
-static int
-pthread_cancel(sp_pthread_t thread)
-{
-	ssh_signal(SIGCHLD, sshpam_oldsig);
-	return (kill(thread, SIGTERM));
-}
-
-/* ARGSUSED */
-static int
-pthread_join(sp_pthread_t thread, void **value)
-{
-	int status;
-
-	if (sshpam_thread_status != -1)
-		return (sshpam_thread_status);
-	ssh_signal(SIGCHLD, sshpam_oldsig);
-	while (waitpid(thread, &status, 0) == -1) {
-		if (errno == EINTR)
-			continue;
-		fatal_f("waitpid: %s", strerror(errno));
-	}
-	return (status);
+	if (!WIFEXITED(sshpam_child_status))
+		logdie("PAM: callback child exited unexpectedly");
+	if (WEXITSTATUS(sshpam_child_status) != 0)
+		logdie("PAM: callback child exited uncleanly");
 }
-#endif
-
 
 static pam_handle_t *sshpam_handle = NULL;
 static int sshpam_err = 0;
@@ -323,72 +247,11 @@ sshpam_password_change_required(int reqd
 	}
 }
 
-/* Import regular and PAM environment from subprocess */
-static void
-import_environments(struct sshbuf *b)
-{
-	char *env;
-	u_int n, i, num_env;
-	int r;
-
-	debug3_f("entering");
-
-#ifndef UNSUPPORTED_POSIX_THREADS_HACK
-	/* Import variables set by do_pam_account */
-	if ((r = sshbuf_get_u32(b, &n)) != 0)
-		fatal_fr(r, "buffer error");
-	if (n > INT_MAX)
-		fatal_f("invalid PAM account status %u", n);
-	sshpam_account_status = (int)n;
-	if ((r = sshbuf_get_u32(b, &n)) != 0)
-		fatal_fr(r, "buffer error");
-	sshpam_password_change_required(n != 0);
-
-	/* Import environment from subprocess */
-	if ((r = sshbuf_get_u32(b, &num_env)) != 0)
-		fatal_fr(r, "buffer error");
-	if (num_env > 1024) {
-		fatal_f("received %u environment variables, expected <= 1024",
-		    num_env);
-	}
-	sshpam_env = xcalloc(num_env + 1, sizeof(*sshpam_env));
-	debug3("PAM: num env strings %u", num_env);
-	for(i = 0; i < num_env; i++) {
-		if ((r = sshbuf_get_cstring(b, &(sshpam_env[i]), NULL)) != 0)
-			fatal_fr(r, "buffer error");
-	}
-	sshpam_env[num_env] = NULL;
-
-	/* Import PAM environment from subprocess */
-	if ((r = sshbuf_get_u32(b, &num_env)) != 0)
-		fatal_fr(r, "buffer error");
-	if (num_env > 1024) {
-		fatal_f("received %u PAM env variables, expected <= 1024",
-		    num_env);
-	}
-	debug("PAM: num PAM env strings %u", num_env);
-	for (i = 0; i < num_env; i++) {
-		if ((r = sshbuf_get_cstring(b, &env, NULL)) != 0)
-			fatal_fr(r, "buffer error");
-		/* Errors are not fatal here */
-		if ((r = pam_putenv(sshpam_handle, env)) != PAM_SUCCESS) {
-			error("PAM: pam_putenv: %s",
-			    pam_strerror(sshpam_handle, r));
-		}
-		/*
-		 * XXX this possibly leaks env because it is not documented
-		 * what pam_putenv() does with it. Does it copy it? Does it
-		 * take ownership? We don't know, so it's safest just to leak.
-		 */
-	}
-#endif
-}
-
 /*
- * Conversation function for authentication thread.
+ * Conversation function for keyboard-interactive thread.
  */
 static int
-sshpam_thread_conv(int n, sshpam_const struct pam_message **msg,
+sshpam_child_conv(int n, sshpam_const struct pam_message **msg,
     struct pam_response **resp, void *data)
 {
 	struct sshbuf *buffer;
@@ -397,7 +260,7 @@ sshpam_thread_conv(int n, sshpam_const s
 	int r, i;
 	u_char status;
 
-	debug3_f("PAM: entering, %d messages", n);
+	debug3("PAM: %s entering, %d messages", __func__, n);
 	*resp = NULL;
 
 	if (data == NULL) {
@@ -467,6 +330,7 @@ sshpam_thread_conv(int n, sshpam_const s
 	return (PAM_CONV_ERR);
 }
 
+
 static int
 check_pam_user(Authctxt *authctxt)
 {
@@ -494,50 +358,81 @@ check_pam_user(Authctxt *authctxt)
 }
 
 /*
- * Authentication thread.
+ * Terminates the call back child.
+ *
+ * Sends a message of type PAM_SUCCESS or PAM_AUTH_ERR to the child.
+ * In response receives a message with remaining PAM prompts.
+ * When not using privilege separation, receives serialized packet state too.
+ *
+ * After that, the child exits.
  */
-static void *
-sshpam_thread(void *ctxtp)
+void
+relieve_from_duty(struct pam_ctxt *ctxt)
 {
-	struct pam_ctxt *ctxt = ctxtp;
 	struct sshbuf *buffer = NULL;
-	struct pam_conv sshpam_conv;
-	int r, flags = (options.permit_empty_passwd == 0 ?
-	    PAM_DISALLOW_NULL_AUTHTOK : 0);
-#ifndef UNSUPPORTED_POSIX_THREADS_HACK
-	extern char **environ;
-	char **env_from_pam;
-	u_int i;
-	const char *pam_user;
-	const char **ptr_pam_user = &pam_user;
-	char *tz = getenv("TZ");
+	int r;
+	u_char type;
+	char *msg;
+	size_t len;
 
-	sshpam_err = pam_get_item(sshpam_handle, PAM_USER,
-	    (sshpam_const void **)ptr_pam_user);
-	if (sshpam_err != PAM_SUCCESS)
-		goto auth_fail;
+	if ((buffer = sshbuf_new()) == NULL)
+		fatal_f("sshbuf_new failed");
 
-	environ[0] = NULL;
-	if (tz != NULL)
-		if (setenv("TZ", tz, 1) == -1)
-			error("PAM: could not set TZ environment: %s",
-			    strerror(errno));
-
-	if (sshpam_authctxt != NULL) {
-		setproctitle("%s [pam]",
-		    sshpam_authctxt->valid ? pam_user : "unknown");
+	if ((r = sshbuf_put_cstring(buffer, "OK")) != 0)
+		fatal_f("buffer error: %s", ssh_err(r));
+
+	type = (ctxt->pam_done == 1) ? PAM_SUCCESS : PAM_AUTH_ERR;
+	if (ssh_msg_send(ctxt->pam_csock, type, buffer) == -1)
+		fatal_f("cannnot terminate callback child (send)");
+
+	sshbuf_reset(buffer);
+	if (ssh_msg_recv(ctxt->pam_csock, buffer) == -1)
+		fatal("%s: cannnot terminate callback child (receive)",
+		    __func__);
+
+	if ((r = sshbuf_get_u8(buffer, &type)) != 0 ||
+	    (r = sshbuf_get_cstring(buffer, &msg, &len)) != 0)
+		fatal_f("buffer error: %s", ssh_err(r));
+	if (len) {
+		if ((r = sshbuf_put(loginmsg, msg, len)) != 0)
+			fatal_f("buffer error: %s", ssh_err(r));
 	}
-#endif
+	free(msg);
+	sshbuf_free(buffer);
+	close(ctxt->pam_csock);
+	ctxt->pam_csock = -1;
+}
+	
+int
+get_pam_done(void *ctxt)
+{
+	struct pam_ctxt *pctxt = (struct pam_ctxt *)ctxt;
+	return (pctxt->pam_done);
+}
 
-	sshpam_conv.conv = sshpam_thread_conv;
+/*
+ * Perform PAM authentication.
+ *
+ * PAM APIs (pam_authenticate, pam_acct_mgmt, ...) block and call the
+ * provided callback conversation function (sshpam_conv). The conversation
+ * function sends messages to the callback child (pam_ctxt.pam_child), which
+ * communicates with the client directly, or indirectly through privsep child.
+ */
+void
+do_pam_auth(struct pam_ctxt *ctxt)
+{
+	struct pam_conv sshpam_conv;
+	int flags = (options.permit_empty_passwd == 0 ?
+	    PAM_DISALLOW_NULL_AUTHTOK : 0);
+
+	sshpam_conv.conv = sshpam_child_conv;
 	sshpam_conv.appdata_ptr = ctxt;
 
+	ctxt->pam_done = -1;
+
 	if (sshpam_authctxt == NULL)
 		fatal_f("PAM authctxt not initialized");
 
-	if ((buffer = sshbuf_new()) == NULL)
-		fatal_f("sshbuf_new failed");
-
 	sshpam_err = pam_set_item(sshpam_handle, PAM_CONV,
 	    (const void *)&sshpam_conv);
 	if (sshpam_err != PAM_SUCCESS)
@@ -562,76 +457,34 @@ sshpam_thread(void *ctxtp)
 		sshpam_password_change_required(0);
 	}
 
-	if ((r = sshbuf_put_cstring(buffer, "OK")) != 0)
-		fatal_fr(r, "buffer error");
-
-#ifndef UNSUPPORTED_POSIX_THREADS_HACK
-	/* Export variables set by do_pam_account */
-	if ((r = sshbuf_put_u32(buffer, sshpam_account_status)) != 0 ||
-	    (r = sshbuf_put_u32(buffer, sshpam_authctxt->force_pwchange)) != 0)
-		fatal_fr(r, "buffer error");
-
-	/* Export any environment strings set in child */
-	for (i = 0; environ[i] != NULL; i++) {
-		/* Count */
-		if (i > INT_MAX)
-			fatal_f("too many environment strings");
-	}
-	if ((r = sshbuf_put_u32(buffer, i)) != 0)
-		fatal_fr(r, "buffer error");
-	for (i = 0; environ[i] != NULL; i++) {
-		if ((r = sshbuf_put_cstring(buffer, environ[i])) != 0)
-			fatal_fr(r, "buffer error");
-	}
-	/* Export any environment strings set by PAM in child */
-	env_from_pam = pam_getenvlist(sshpam_handle);
-	for (i = 0; env_from_pam != NULL && env_from_pam[i] != NULL; i++) {
-		/* Count */
-		if (i > INT_MAX)
-			fatal_f("too many PAM environment strings");
-	}
-	if ((r = sshbuf_put_u32(buffer, i)) != 0)
-		fatal_fr(r, "buffer error");
-	for (i = 0; env_from_pam != NULL && env_from_pam[i] != NULL; i++) {
-		if ((r = sshbuf_put_cstring(buffer, env_from_pam[i])) != 0)
-			fatal_fr(r, "buffer error");
-	}
-#endif /* UNSUPPORTED_POSIX_THREADS_HACK */
-
-	/* XXX - can't do much about an error here */
-	ssh_msg_send(ctxt->pam_csock, sshpam_err, buffer);
-	sshbuf_free(buffer);
-	pthread_exit(NULL);
-
- auth_fail:
-	if ((r = sshbuf_put_cstring(buffer,
-	    pam_strerror(sshpam_handle, sshpam_err))) != 0)
-		fatal_fr(r, "buffer error");
-	/* XXX - can't do much about an error here */
-	if (sshpam_err == PAM_ACCT_EXPIRED)
-		ssh_msg_send(ctxt->pam_csock, PAM_ACCT_EXPIRED, buffer);
-	else if (sshpam_maxtries_reached)
-		ssh_msg_send(ctxt->pam_csock, PAM_MAXTRIES, buffer);
-	else
-		ssh_msg_send(ctxt->pam_csock, PAM_AUTH_ERR, buffer);
-	sshbuf_free(buffer);
-	pthread_exit(NULL);
+	ctxt->pam_done = 1;
 
-	return (NULL); /* Avoid warning for non-pthread case */
+auth_fail:
+	if (sshpam_err != PAM_SUCCESS)
+		error("PAM: %s for %s%.100s from %.100s",
+		    pam_strerror(sshpam_handle, sshpam_err),
+		    sshpam_authctxt->valid ? "" : "illegal user ",
+		    sshpam_authctxt->user,
+		    sshpam_rhost != NULL ? sshpam_rhost : "unknown");
+	relieve_from_duty(ctxt);
 }
 
 void
-sshpam_thread_cleanup(void)
+sshpam_child_cleanup(void)
 {
 	struct pam_ctxt *ctxt = cleanup_ctxt;
 
 	debug3_f("entering");
-	if (ctxt != NULL && ctxt->pam_thread != 0) {
-		pthread_cancel(ctxt->pam_thread);
-		pthread_join(ctxt->pam_thread, NULL);
-		close(ctxt->pam_psock);
-		close(ctxt->pam_csock);
-		memset(ctxt, 0, sizeof(*ctxt));
+	if (ctxt != NULL && ctxt->pam_child != 0) {
+		signal(SIGCHLD, sshpam_oldsig);
+		/* callback child should have had exited by now */
+		kill(ctxt->pam_child, SIGTERM);
+		if (ctxt->pam_psock != -1)
+			close(ctxt->pam_psock);
+		if (ctxt->pam_csock != -1)
+			close(ctxt->pam_csock);
+		if (sshpam_child_status == -1)
+			waitpid(ctxt->pam_child, &sshpam_child_status, 0);
 		cleanup_ctxt = NULL;
 	}
 }
@@ -898,7 +751,8 @@ static void *
 sshpam_init_ctx(Authctxt *authctxt)
 {
 	struct pam_ctxt *ctxt;
-	int result, socks[2];
+	int socks[2];
+	pid_t pid;
 
 	debug3_f("entering");
 	/*
@@ -917,7 +771,7 @@ sshpam_init_ctx(Authctxt *authctxt)
 	expose_authinfo(__func__);
 	ctxt = xcalloc(1, sizeof *ctxt);
 
-	/* Start the authentication thread */
+	/* Fork the callback child and start PAM authentication */
 	if (socketpair(AF_UNIX, SOCK_STREAM, PF_UNSPEC, socks) == -1) {
 		error("PAM: failed create sockets: %s", strerror(errno));
 		free(ctxt);
@@ -925,16 +779,29 @@ sshpam_init_ctx(Authctxt *authctxt)
 	}
 	ctxt->pam_psock = socks[0];
 	ctxt->pam_csock = socks[1];
-	result = pthread_create(&ctxt->pam_thread, NULL, sshpam_thread, ctxt);
-	if (result != 0) {
-		error("PAM: failed to start authentication thread: %s",
-		    strerror(result));
+
+	sshpam_child_status = -1;
+	switch ((pid = fork())) {
+	case -1:
+		error("fork(): %s", strerror(errno));
 		close(socks[0]);
 		close(socks[1]);
 		free(ctxt);
 		return (NULL);
+	case 0:
+		/* child processes query & respond for kbdint */
+		close(ctxt->pam_csock);
+		ctxt->pam_csock = -1;
+		break;
+	default:
+		/* parent does PAM */
+		ctxt->pam_child = pid;
+		close(ctxt->pam_psock);
+		ctxt->pam_psock = -1;
+		sshpam_oldsig = signal(SIGCHLD, sshpam_sigchld_handler);
+		cleanup_ctxt = ctxt;
+		do_pam_auth(ctxt);
 	}
-	cleanup_ctxt = ctxt;
 	return (ctxt);
 }
 
@@ -959,6 +826,17 @@ sshpam_query(void *ctx, char **name, cha
 	**prompts = NULL;
 	plen = 0;
 	*echo_on = xmalloc(sizeof(u_int));
+
+	/* in case PAM was already done in callback child */
+	switch (ctxt->pam_done) {
+	case 1:
+		return (0);
+	case 0:
+		break;
+	default:
+		return (-1);
+	}
+
 	while (ssh_msg_recv(ctxt->pam_psock, buffer) == 0) {
 		if (++nmesg > PAM_MAX_NUM_MSG)
 			fatal_f("too many query messages");
@@ -997,17 +875,6 @@ sshpam_query(void *ctx, char **name, cha
 			/* FALLTHROUGH */
 		case PAM_AUTH_ERR:
 			debug3("PAM: %s", pam_strerror(sshpam_handle, type));
-			if (**prompts != NULL && strlen(**prompts) != 0) {
-				free(*info);
-				*info = **prompts;
-				**prompts = NULL;
-				*num = 0;
-				**echo_on = 0;
-				ctxt->pam_done = -1;
-				free(msg);
-				sshbuf_free(buffer);
-				return 0;
-			}
 			/* FALLTHROUGH */
 		case PAM_SUCCESS:
 			if (**prompts != NULL) {
@@ -1020,25 +887,16 @@ sshpam_query(void *ctx, char **name, cha
 				free(**prompts);
 				**prompts = NULL;
 			}
-			if (type == PAM_SUCCESS) {
-				if (!sshpam_authctxt->valid ||
-				    (sshpam_authctxt->pw->pw_uid == 0 &&
-				    options.permit_root_login != PERMIT_YES))
-					fatal("Internal error: PAM auth "
-					    "succeeded when it should have "
-					    "failed");
-				import_environments(buffer);
-				*num = 0;
-				**echo_on = 0;
-				ctxt->pam_done = 1;
-				free(msg);
-				sshbuf_free(buffer);
-				return (0);
-			}
-			error("PAM: %s for %s%.100s from %.100s", msg,
-			    sshpam_authctxt->valid ? "" : "illegal user ",
-			    sshpam_authctxt->user, sshpam_rhost);
-			/* FALLTHROUGH */
+			/* send accumulated messages to parent */
+			sshbuf_reset(buffer);
+			if ((r = sshbuf_put_cstring(buffer,
+			    sshbuf_mutable_ptr(loginmsg))) != 0)
+				fatal("%s: buffer error: %s",
+				    __func__, ssh_err(r));
+			ssh_msg_send(ctxt->pam_psock, type, buffer);
+			/* callback child ends here */
+			close(ctxt->pam_psock);
+			exit(0);
 		default:
 			*num = 0;
 			**echo_on = 0;
@@ -1126,7 +984,7 @@ sshpam_free_ctx(void *ctxtp)
 	struct pam_ctxt *ctxt = ctxtp;
 
 	debug3_f("entering");
-	sshpam_thread_cleanup();
+	sshpam_child_cleanup();
 	free(ctxt);
 	/*
 	 * We don't call sshpam_cleanup() here because we may need the PAM
--- old/auth-pam.h	2025-10-10 12:02:52.755387435 +0200
+++ new/auth-pam.h	2025-10-10 12:02:54.045587160 +0200
@@ -37,7 +37,8 @@ int do_pam_putenv(char *, char *);
 char ** fetch_pam_environment(void);
 char ** fetch_pam_child_environment(void);
 void free_pam_environment(char **);
-void sshpam_thread_cleanup(void);
+void sshpam_child_cleanup(void);
+int get_pam_done(void *);
 void sshpam_cleanup(void);
 int sshpam_auth_passwd(Authctxt *, const char *);
 int sshpam_get_maxtries_reached(void);
--- old/monitor.c	2025-10-10 12:02:52.760111955 +0200
+++ new/monitor.c	2025-10-10 12:02:54.046551915 +0200
@@ -1240,6 +1240,7 @@ mm_answer_pam_init_ctx(struct ssh *ssh,
 {
 	u_int ok = 0;
 	int r;
+	int pam_done = 0;
 
 	debug3_f("entering");
 	if (!options.kbd_interactive_authentication)
@@ -1256,6 +1257,33 @@ mm_answer_pam_init_ctx(struct ssh *ssh,
 	}
 	if ((r = sshbuf_put_u32(m, ok)) != 0)
 		fatal_fr(r, "buffer error");
+
+	/* pam conversation successfully finished in child process */
+	if (sshpam_ctxt != NULL &&
+	    (pam_done = get_pam_done(sshpam_ctxt)) != 0) {
+		monitor_permit(mon_dispatch, MONITOR_REQ_PAM_RESPOND, 1);
+		auth_method = "keyboard-interactive";
+		auth_submethod = "pam";
+		/* 
+		 * ANS_PAM_INIT_CTX already sent by callback child.
+		 * Privsep child now expects ANS_PAM_QUERY.
+		 */
+		sshbuf_reset(m);
+		sshbuf_put_u32(m, 0);           /* ret */
+		sshbuf_put_cstring(m, "");      /* name */
+		if (pam_done == 1) {            /* info */
+			sshbuf_put_cstring(m, "");
+		} else {
+			sshbuf_put_string(m, sshbuf_mutable_ptr(loginmsg),
+			    sshbuf_len(loginmsg));
+			sshbuf_reset(loginmsg);
+		}
+		sshbuf_put_u32(m, sshpam_get_maxtries_reached());
+		sshbuf_put_u32(m, 0);           /* num */
+		mm_request_send(sock, MONITOR_ANS_PAM_QUERY, m);
+		return (0);
+	}
+
 	mm_request_send(sock, MONITOR_ANS_PAM_INIT_CTX, m);
 	return (0);
 }
@@ -1935,7 +1963,8 @@ monitor_apply_keystate(struct ssh *ssh,
 	int r;
 
 	debug3_f("packet_set_state");
-	if ((r = ssh_packet_set_state(ssh, child_state)) != 0)
+	if ((r = ssh_packet_set_state(ssh, child_state)) != 0 ||
+	    (r = ssh_packet_set_postauth(ssh)) != 0)
 		fatal_fr(r, "packet_set_state");
 	sshbuf_free(child_state);
 	child_state = NULL;
--- old/packet.c	2025-10-10 12:02:53.304336105 +0200
+++ new/packet.c	2025-10-10 12:02:54.047462625 +0200
@@ -2350,7 +2350,7 @@ ssh_packet_get_output(struct ssh *ssh)
 }
 
 /* Reset after_authentication and reset compression in post-auth privsep */
-static int
+int
 ssh_packet_set_postauth(struct ssh *ssh)
 {
 	int r;
@@ -2604,9 +2604,6 @@ ssh_packet_set_state(struct ssh *ssh, st
 	    (r = ssh_set_newkeys(ssh, MODE_OUT)) != 0)
 		return r;
 
-	if ((r = ssh_packet_set_postauth(ssh)) != 0)
-		return r;
-
 	sshbuf_reset(state->input);
 	sshbuf_reset(state->output);
 	if ((r = sshbuf_get_string_direct(m, &input, &ilen)) != 0 ||
--- old/packet.h	2025-10-06 04:25:16.000000000 +0200
+++ new/packet.h	2025-10-10 12:02:54.047819145 +0200
@@ -159,6 +159,7 @@ u_int	 ssh_packet_get_maxsize(struct ssh
 
 int	 ssh_packet_get_state(struct ssh *, struct sshbuf *);
 int	 ssh_packet_set_state(struct ssh *, struct sshbuf *);
+int	 ssh_packet_set_postauth(struct ssh *ssh);
 
 const char *ssh_remote_ipaddr(struct ssh *);
 int	 ssh_remote_port(struct ssh *);
--- old/session.c	2025-10-10 12:02:53.166544835 +0200
+++ new/session.c	2025-10-10 12:02:54.048567540 +0200
@@ -2731,7 +2731,7 @@ do_cleanup(struct ssh *ssh, Authctxt *au
 #ifdef USE_PAM
 	if (options.use_pam) {
 		sshpam_cleanup();
-		sshpam_thread_cleanup();
+		sshpam_child_cleanup();
 	}
 #endif
 
