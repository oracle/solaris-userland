commit df19376aa8a123e4700849011f5b5498a43673a2
Author: Vladimir Kotal <Vladimir.Kotal@Oracle.COM>
Date:   Tue Jun 6 14:51:33 2023 +0200

    initial set of changes to build wanboot
--- openssl-3.5.1/crypto/bio/bio_addr.c
+++ openssl-3.5.1/crypto/bio/bio_addr.c
@@ -767,6 +767,29 @@ break;
         }
     } else {
 #endif
+
+#ifdef _BOOT
+struct  hostent {
+        char    *h_name;        /* official name of host */
+        char    **h_aliases;    /* alias list */
+        int     h_addrtype;     /* host address type */
+        int     h_length;       /* length of address */
+        char    **h_addr_list;  /* list of addresses from name server */
+#define h_addr  h_addr_list[0]  /* address, for backward compatibility */
+};
+
+extern int h_errno;
+
+extern struct hostent *gethostbyname(const char *);
+
+struct	servent {
+		char	*s_name;	/* official service name */
+		char	**s_aliases;	/* alias list */
+		int	s_port;		/* port # */
+		char	*s_proto;	/* protocol to use */
+	};
+#endif
+
         const struct hostent *he;
 /*
  * Because struct hostent is defined for 32-bit pointers only with
@@ -899,6 +922,7 @@ && portnum > 0 && portnum < 65536) {
                 se_fallback.s_port = htons((unsigned short)portnum);
                 se_fallback.s_proto = proto;
                 se = &se_fallback;
+#ifndef _BOOT
             } else if (endp == service) {
                 se = getservbyname(service, proto);
 
@@ -907,6 +931,7 @@ ERR_raise_data(ERR_LIB_SYS, get_last_soc
                                    "calling getservbyname()");
                     goto err;
                 }
+#endif
             } else {
                 ERR_raise(ERR_LIB_BIO, BIO_R_MALFORMED_HOST_OR_SERVICE);
                 goto err;
--- openssl-3.5.1/crypto/bio/bio_sock.c
+++ openssl-3.5.1/crypto/bio/bio_sock.c
@@ -430,6 +430,13 @@ * Returns -1 on error, 0 on timeout, and
  */
 int BIO_socket_wait(int fd, int for_read, time_t max_time)
 {
+#ifdef _BOOT
+    /*
+     * select() is not available when linking stand-alone
+     * library for wanboot.
+     */
+    return 1;
+#else
 # if defined(OPENSSL_SYS_WINDOWS) || !defined(POLLIN)
     fd_set confds;
     struct timeval tv;
@@ -471,5 +478,6 @@ confds.fd = fd;
     confds.events = for_read ? POLLIN : POLLOUT;
     return poll(&confds, 1, (int)(max_time - now) * 1000);
 # endif
+#endif
 }
 #endif /* !defined(OPENSSL_NO_SOCK) */
--- openssl-3.5.1/crypto/cryptlib.c
+++ openssl-3.5.1/crypto/cryptlib.c
@@ -103,6 +103,12 @@ return 0;
 }
 # endif
 
+/*
+ * Solaris libsa.a used for WAN boot doesn't provide for vfprintf(). Since
+ * OPENSSL_showfatal() is only used here and in 'uplink' module which we do
+ * not compile we can safely remove this function.
+ */
+#ifndef    _BOOT
 void OPENSSL_showfatal(const char *fmta, ...)
 {
     va_list ap;
@@ -245,6 +251,7 @@ vfprintf(stderr, fmta, ap);
     va_end(ap);
 #endif
 }
+#endif	/* _BOOT */
 
 int OPENSSL_isservice(void)
 {
@@ -254,8 +261,13 @@ #endif
 
 void OPENSSL_die(const char *message, const char *file, int line)
 {
+#ifndef _BOOT
     OPENSSL_showfatal("%s:%d: OpenSSL internal error: %s\n",
                       file, line, message);
+#else
+    fprintf(stderr, "%s:%d: OpenSSL internal error: %s\n",
+                      file, line, message);
+#endif /* _BOOT */
 #if !defined(_WIN32) || defined(OPENSSL_SYS_UEFI)
     abort();
 #else
--- openssl-3.5.1/crypto/evp/ctrl_params_translate.c
+++ openssl-3.5.1/crypto/evp/ctrl_params_translate.c
@@ -37,6 +37,52 @@ #include "crypto/evp.h"
 #include "crypto/dh.h"
 #include "crypto/ec.h"
 
+#ifdef _BOOT
+/*
+ * This is the only place in OpenSSL so far which needs atoi() and wanboot
+ * contains the definitions, however all of them are local so far.
+ * Include the implementation directly until the use of atoi() becomes
+ * widespread throughout OpenSSL code.
+ */
+
+/*
+ * This implementation is taken from stand-alone libsock library:
+ * usr/src/stand/lib/sock/sock_test.c
+ */
+#ifndef	isdigit
+#define	isdigit(c) ((c) >= '0' && (c) <= '9')
+#endif
+
+#ifndef	isspace
+#define	isspace(c) ((c) == ' ' || (c) == '\t' || (c) == '\n' || \
+		    (c) == '\r' || (c) == '\f' || (c) == '\013')
+#endif
+int
+atoi(const char *p)
+{
+	int n;
+	int c = *p++, neg = 0;
+
+	while (isspace(c)) {
+		c = *p++;
+	}
+	if (!isdigit(c)) {
+		switch (c) {
+		case '-':
+			neg++;
+			/* FALLTHROUGH */
+		case '+':
+			c = *p++;
+		}
+	}
+	for (n = 0; isdigit(c); c = *p++) {
+		n *= 10; /* two steps to avoid unnecessary overflow */
+		n += '0' - c; /* accum neg to avoid surprises at MAX */
+	}
+	return (neg ? n : -n);
+}
+#endif
+
 struct translation_ctx_st;       /* Forwarding */
 struct translation_st;           /* Forwarding */
 
--- openssl-3.5.1/crypto/init.c
+++ openssl-3.5.1/crypto/init.c
@@ -109,8 +109,10 @@ /* We use _onexit() in preference becaus
     if (_onexit(win32atexit) == NULL)
         return 0;
 #  else
+#ifndef _BOOT
     if (atexit(OPENSSL_cleanup) != 0)
         return 0;
+#endif
 #  endif
 # endif
 #endif
--- openssl-3.5.1/crypto/o_dir.c
+++ openssl-3.5.1/crypto/o_dir.c
@@ -23,7 +23,7 @@ #define LP_find_file_end OPENSSL_DIR_end
 #include "internal/o_dir.h"
 
 #define LPDIR_H
-#if defined OPENSSL_SYS_UNIX || defined DJGPP \
+#if (defined OPENSSL_SYS_UNIX && !defined _BOOT) || defined DJGPP \
     || (defined __VMS_VER && __VMS_VER >= 70000000)
 # include "LPdir_unix.c"
 #elif defined OPENSSL_SYS_VMS
--- openssl-3.5.1/crypto/sparccpuid.S
+++ openssl-3.5.1/crypto/sparccpuid.S
@@ -477,6 +477,7 @@ mov	%g1,%o0
 .type	CRYPTO_memcmp,#function
 .size	CRYPTO_memcmp,.-CRYPTO_memcmp
 
+#ifndef _BOOT
 .global	_sparcv9_vis1_instrument_bus
 .align	8
 _sparcv9_vis1_instrument_bus:
@@ -576,3 +577,7 @@ .size	_sparcv9_vis1_instrument_bus2,.-_s
 .section	".init",#alloc,#execinstr
 	call	OPENSSL_cpuid_setup
 	nop
+#else
+        nop
+        nop
+#endif
--- openssl-3.5.1/crypto/sparcv9cap.c
+++ openssl-3.5.1/crypto/sparcv9cap.c
@@ -21,7 +21,11 @@ #include "crypto/sparc_arch.h"
 #if defined(__GNUC__) && defined(__linux)
 __attribute__ ((visibility("hidden")))
 #endif
+#ifndef        _BOOT
 unsigned int OPENSSL_sparcv9cap_P[2] = { SPARCV9_TICK_PRIVILEGED, 0 };
+#else
+unsigned int OPENSSL_sparcv9cap_P[2] = { SPARCV9_VIS1, 0 };
+#endif
 
 unsigned long _sparcv9_rdtick(void);
 void _sparcv9_vis1_probe(void);
@@ -38,7 +42,7 @@ size_t _sparcv9_vis1_instrument_bus2(uns
 uint32_t OPENSSL_rdtsc(void)
 {
     if (OPENSSL_sparcv9cap_P[0] & SPARCV9_TICK_PRIVILEGED)
-#if defined(__sun) && defined(__SVR4)
+#if defined(__sun) && defined(__SVR4) && !defined(_BOOT)
         return gethrtime();
 #else
         return 0;
@@ -49,20 +53,28 @@ }
 
 size_t OPENSSL_instrument_bus(unsigned int *out, size_t cnt)
 {
+#ifndef _BOOT
     if ((OPENSSL_sparcv9cap_P[0] & (SPARCV9_TICK_PRIVILEGED | SPARCV9_BLK)) ==
         SPARCV9_BLK)
         return _sparcv9_vis1_instrument_bus(out, cnt);
     else
         return 0;
+#else
+    return 0;
+#endif
 }
 
 size_t OPENSSL_instrument_bus2(unsigned int *out, size_t cnt, size_t max)
 {
+#ifndef _BOOT
     if ((OPENSSL_sparcv9cap_P[0] & (SPARCV9_TICK_PRIVILEGED | SPARCV9_BLK)) ==
         SPARCV9_BLK)
         return _sparcv9_vis1_instrument_bus2(out, cnt, max);
     else
         return 0;
+#else
+    return 0;
+#endif
 }
 
 static sigjmp_buf common_jmp;
@@ -82,6 +94,16 @@ static unsigned int (*getisax) (unsigned
 # endif
 #endif
 
+#if defined(_BOOT)
+/*
+ * Hardcoding sparc capabilities for wanboot.
+ * Older CPUs are EOLed anyway.
+ */
+void OPENSSL_cpuid_setup(void)
+{
+	OPENSSL_sparcv9cap_P[0] = SPARCV9_VIS1;
+}
+#else
 void OPENSSL_cpuid_setup(void)
 {
     char *e;
@@ -229,3 +251,4 @@ OPENSSL_sparcv9cap_P[0] |= SPARCV9_64BIT
     }
 # endif
 }
+#endif
--- openssl-3.5.1/include/internal/sockets.h
+++ openssl-3.5.1/include/internal/sockets.h
@@ -89,7 +89,9 @@ #  ifdef OPENSSL_SYS_VXWORKS
 #   include <time.h>
 #  endif
 
+#  ifndef _BOOT
 #  include <netdb.h>
+#  endif
 #  if defined(OPENSSL_SYS_VMS)
 typedef size_t socklen_t;        /* Currently appears to be missing on VMS */
 #  endif
@@ -98,7 +100,7 @@ #   include <socket.h>
 #   include <in.h>
 #   include <inet.h>
 #  else
-#   include <sys/socket.h>
+#   include "sys/socket.h"
 #   if !defined(NO_SYS_UN_H) && defined(AF_UNIX) && !defined(OPENSSL_NO_UNIX_SOCK)
 #    include <sys/un.h>
 #    ifndef UNIX_PATH_MAX
@@ -176,6 +178,14 @@ #  define clear_socket_error()    WSASet
 #  define get_last_socket_error_is_eintr() (get_last_socket_error() == WSAEINTR)
 #  define readsocket(s,b,n)       recv((s),(b),(n),0)
 #  define writesocket(s,b,n)      send((s),(b),(n),0)
+# elif defined(_BOOT)
+extern int socket_read(int, void *, size_t, int);
+extern int socket_close(int);
+#  define ioctlsocket(a,b,c)	  (-1)
+#  define closesocket(s)          socket_close(s)
+#  define readsocket(s,b,n)       socket_read((s),(b),(n), 200)
+#  define writesocket(s,b,n)      send((s),(b),(n), 0)
+#  define __xnet_getsockopt	  getsockopt
 # elif defined(__DJGPP__)
 #  define closesocket(s)          close_s(s)
 #  define readsocket(s,b,n)       read_s(s,b,n)
--- openssl-3.5.1/providers/implementations/rands/seeding/rand_unix.c
+++ openssl-3.5.1/providers/implementations/rands/seeding/rand_unix.c
@@ -82,7 +82,7 @@ */
 # undef OSSL_POSIX_TIMER_OKAY
 /* On some systems, _POSIX_TIMERS is defined but empty.
  * Subtracting by 0 when comparing avoids an error in this case. */
-# if defined(_POSIX_TIMERS) && _POSIX_TIMERS -0 > 0
+# if defined(_POSIX_TIMERS) && _POSIX_TIMERS -0 > 0 && !defined(_BOOT)
 #  if defined(__GLIBC__)
 #   if defined(__GLIBC_PREREQ)
 #    if __GLIBC_PREREQ(2, 17)
--- openssl-3.5.1/crypto/sleep.c
+++ openssl-3.5.1/crypto/sleep.c
@@ -15,6 +15,7 @@
 
 # if defined(OPENSSL_USE_USLEEP)                        \
     || defined(__DJGPP__)                               \
+    || defined(_BOOT)                               \
     || (defined(__TANDEM) && defined(_REENTRANT))
 
 /*
--- openssl-3.5.1/crypto/http/http_lib.c
+++ openssl-3.5.1/crypto/http/http_lib.c
@@ -54,6 +54,7 @@ int OSSL_parse_url(const char *url, char
                    char **pport, int *pport_num,
                    char **ppath, char **pquery, char **pfrag)
 {
+#ifndef _BOOT
     const char *p, *tmp;
     const char *scheme, *scheme_end;
     const char *user, *user_end;
@@ -177,7 +178,9 @@ int OSSL_parse_url(const char *url, char
     return 1;
 
  parse_err:
+#endif /* _BOOT */
     ERR_raise(ERR_LIB_HTTP, HTTP_R_ERROR_PARSING_URL);
+#ifndef _BOOT
 
  err:
     free_pstring(pscheme);
@@ -188,6 +191,7 @@ int OSSL_parse_url(const char *url, char
     free_pstring(pquery);
     free_pstring(pfrag);
     return 0;
+#endif /* _BOOT */
 }
 
 #ifndef OPENSSL_NO_HTTP
